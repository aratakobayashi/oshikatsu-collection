require('dotenv').config({ path: '.env.staging' })
const { createClient } = require('@supabase/supabase-js')
const { randomUUID } = require('crypto')
const { enhancedLocationDetection, ENHANCED_LOCATION_DETECTION } = require('./enhanced-detection-system.cjs')

const supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY)

// Âº∑ÂåñÁâàÊ§úÂá∫ÁµêÊûú„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
async function saveEnhancedResults() {
  console.log('üíæ Âº∑ÂåñÁâàÊ§úÂá∫ÁµêÊûú„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò‰∏≠...\n')
  
  const { data: celebrity } = await supabase
    .from('celebrities')
    .select('*')
    .eq('name', '„Çà„Å´„ÅÆ„Å°„ÇÉ„Çì„Å≠„Çã')
    .single()

  // ÂÖ®„Å¶„ÅÆ„Çà„Å´„ÅÆ„Å°„ÇÉ„Çì„Å≠„Çã„Ç®„Éî„ÇΩ„Éº„Éâ„ÇíÂèñÂæó
  const { data: episodes } = await supabase
    .from('episodes')
    .select('*')
    .eq('celebrity_id', celebrity.id)
    .order('date', { ascending: false })

  console.log(`üì∫ ÂàÜÊûêÂØæË±°: ${episodes.length}‰ª∂„ÅÆ„Ç®„Éî„ÇΩ„Éº„Éâ`)

  const saveResults = {
    processed: 0,
    detections: 0,
    saved: 0,
    errors: 0
  }

  for (const episode of episodes) {
    try {
      saveResults.processed++
      
      // Âº∑ÂåñÁâàÊ§úÂá∫„ÇíÂÆüË°å
      const detection = enhancedLocationDetection(episode)
      
      if (detection.estimatedStore && detection.overallConfidence >= 60) {
        saveResults.detections++
        
        const store = detection.estimatedStore
        // slug„ÇíÁîüÊàêÔºàÂ∫óËàóÂêç„ÇíURLÂÆâÂÖ®„Å™ÂΩ¢Âºè„Å´Â§âÊèõÔºâ
        const generateSlug = (name) => {
          const baseSlug = name
            .toLowerCase()
            .replace(/[^\w\s-]/g, '') // ÁâπÊÆäÊñáÂ≠ó„ÇíÈô§Âéª
            .replace(/\s+/g, '-') // „Çπ„Éö„Éº„Çπ„Çí„Éè„Ç§„Éï„É≥„Å´
            .trim()
          
          // „É¶„Éã„Éº„ÇØ„Å´„Åô„Çã„Åü„ÇÅ„Å´Â∫óËàóÂêç„Å®„Çª„É¨„ÉñID„ÇíÁµÑ„ÅøÂêà„Çè„Åõ
          return `${baseSlug}-${celebrity.id.substring(0, 8)}`
        }

        const locationData = {
          id: randomUUID(),
          name: store.name,
          slug: generateSlug(store.name),
          tags: [store.category, `‰ø°È†ºÂ∫¶${store.confidence}%`, `Ê§úÂá∫ÊñπÊ≥ï:${detection.detectionMethod.join(',')}`],
          celebrity_id: celebrity.id,
          created_at: new Date().toISOString()
        }

        // Êó¢Â≠ò„ÅÆlocation„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºàname„Å®slug„ÅÆ‰∏°Êñπ„ÅßÁ¢∫Ë™çÔºâ
        const { data: existingLocation } = await supabase
          .from('locations')
          .select('*')
          .or(`name.eq.${store.name},slug.eq.${generateSlug(store.name)}`)
          .eq('celebrity_id', celebrity.id)
          .single()

        let savedLocation = existingLocation

        if (!existingLocation) {
          // Êñ∞Ë¶è‰ΩúÊàê
          const { data: newLocation, error: locationError } = await supabase
            .from('locations')
            .insert(locationData)
            .select()
            .single()

          if (locationError) {
            console.error(`‚ùå location‰ΩúÊàê„Ç®„É©„Éº (${episode.title}):`, locationError.message)
            saveResults.errors++
            continue
          }
          savedLocation = newLocation
        }


        // episode_locations„ÉÜ„Éº„Éñ„É´„Å´Èñ¢ÈÄ£‰ªò„ÅëÔºàconfidence„Éï„Ç£„Éº„É´„Éâ„ÇíÈô§Â§ñÔºâ
        const episodeLocationData = {
          id: randomUUID(),
          episode_id: episode.id,
          location_id: savedLocation.id,
          created_at: new Date().toISOString()
        }

        // Êó¢Â≠ò„ÅÆÈñ¢ÈÄ£‰ªò„Åë„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const { data: existingEpisodeLocation } = await supabase
          .from('episode_locations')
          .select('*')
          .eq('episode_id', episode.id)
          .eq('location_id', savedLocation.id)
          .single()

        let episodeLocationError = null
        if (!existingEpisodeLocation) {
          const { error } = await supabase
            .from('episode_locations')
            .insert(episodeLocationData)
          episodeLocationError = error
        }

        if (episodeLocationError) {
          console.error(`‚ùå episode_location‰øùÂ≠ò„Ç®„É©„Éº (${episode.title}):`, episodeLocationError.message)
          saveResults.errors++
        } else {
          saveResults.saved++
          console.log(`‚úÖ ‰øùÂ≠òÂÆå‰∫Ü: ${episode.title.substring(0, 40)} ‚Üí ${store.name}`)
        }
      }
      
    } catch (error) {
      console.error(`‚ùå „Ç®„Éî„ÇΩ„Éº„ÉâÂá¶ÁêÜ„Ç®„É©„Éº (${episode.title}):`, error.message)
      saveResults.errors++
    }
  }

  // ÁµêÊûú„Çµ„Éû„É™„Éº
  console.log('\n' + '=' * 60)
  console.log('üíæ „Éá„Éº„Çø„Éô„Éº„Çπ‰øùÂ≠òÁµêÊûú')
  console.log('=' * 60)
  console.log(`Âá¶ÁêÜÊ∏à„Åø: ${saveResults.processed}‰ª∂`)
  console.log(`Ê§úÂá∫ÊàêÂäü: ${saveResults.detections}‰ª∂`)
  console.log(`‰øùÂ≠òÊàêÂäü: ${saveResults.saved}‰ª∂`)
  console.log(`„Ç®„É©„Éº: ${saveResults.errors}‰ª∂`)
  
  const detectionRate = ((saveResults.detections / saveResults.processed) * 100).toFixed(1)
  const saveRate = saveResults.detections > 0 ? ((saveResults.saved / saveResults.detections) * 100).toFixed(1) : 0
  
  console.log(`\nüìä Áµ±Ë®à:`)
  console.log(`Ê§úÂá∫Áéá: ${detectionRate}%`)
  console.log(`‰øùÂ≠òÊàêÂäüÁéá: ${saveRate}%`)

  // ‰øùÂ≠ò„Åï„Çå„ÅüÂ∫óËàó„ÅÆÂàÜÂ∏É„ÇíÁ¢∫Ë™ç
  const { data: savedLocations } = await supabase
    .from('locations')
    .select('name, tags')
    .eq('celebrity_id', celebrity.id)
    .order('created_at', { ascending: false })

  if (savedLocations?.length > 0) {
    console.log(`\nüè™ ‰øùÂ≠òÊ∏à„ÅøÂ∫óËàó (${savedLocations.length}‰ª∂):`)
    const categoryCount = {}
    
    savedLocations.forEach(location => {
      const category = location.tags?.[0] || 'Êú™ÂàÜÈ°û'
      categoryCount[category] = (categoryCount[category] || 0) + 1
      console.log(`  ${location.name} (${category})`)
    })
    
    console.log(`\nüìà „Ç´„ÉÜ„Ç¥„É™ÂàÜÂ∏É:`)
    Object.entries(categoryCount).forEach(([category, count]) => {
      console.log(`  ${category}: ${count}‰ª∂`)
    })
  }

  return saveResults
}

// „É°„Ç§„É≥ÂÆüË°å
async function main() {
  try {
    await saveEnhancedResults()
  } catch (error) {
    console.error('‚ùå „É°„Ç§„É≥„Ç®„É©„Éº:', error)
  }
}

if (require.main === module) {
  main().catch(console.error)
}

module.exports = { saveEnhancedResults }