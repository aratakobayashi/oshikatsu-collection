import { createClient } from '@supabase/supabase-js'

console.log('üîç Êé•Á∂öÊÉÖÂ†±„Éá„Éê„ÉÉ„Ç∞...')
console.log('SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL)
console.log('„Éó„É≠„Ç∏„Çß„ÇØ„ÉàID:', process.env.NEXT_PUBLIC_SUPABASE_URL?.split('//')[1]?.split('.')[0])

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function debugConnection() {
  try {
    // „ÉÜ„Éº„Éñ„É´Â≠òÂú®Á¢∫Ë™ç
    const { data: tables, error: tableError } = await supabase
      .from('articles')
      .select('*', { count: 'exact', head: true })

    if (tableError) {
      console.error('‚ùå articles„ÉÜ„Éº„Éñ„É´„Ç®„É©„Éº:', tableError)
    } else {
      console.log('‚úÖ articles„ÉÜ„Éº„Éñ„É´Â≠òÂú®')
      console.log('Ë®ò‰∫ãÊï∞:', tables)
    }

    // ÂÆüÈöõ„ÅÆ„Éá„Éº„ÇøÁ¢∫Ë™ç
    const { data: articles, error: dataError } = await supabase
      .from('articles')
      .select('id, title, created_at')
      .limit(5)

    if (dataError) {
      console.error('‚ùå „Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', dataError)
    } else {
      console.log('üìä Ë®ò‰∫ã„Éá„Éº„Çø:', articles?.length || 0, '‰ª∂')
      articles?.forEach((article, index) => {
        console.log(`${index + 1}. ${article.title} (${article.created_at})`)
      })
    }

  } catch (error) {
    console.error('‚ùå Êé•Á∂ö„Ç®„É©„Éº:', error)
  }
}

debugConnection()