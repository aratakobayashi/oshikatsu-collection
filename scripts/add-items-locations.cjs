const SUPABASE_URL = 'https://ounloyykptsqzdpbsnpn.supabase.co'
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91bmxveXlrcHRzcXpkcGJzbnBuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ3MjIzODMsImV4cCI6MjA3MDI5ODM4M30.VpSq034vLWHH3n_W-ikJyho6BuwY6UahN52V9US5n0U'

const crypto = require('crypto')

function generateId(name) {
  return crypto.createHash('md5').update(name + Date.now()).digest('hex')
}

async function addItemsAndLocations() {
  console.log('üéØ „Ç¢„Ç§„ÉÜ„É†„Éª„É≠„Ç±„Éº„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíËøΩÂä†...\n')

  try {
    // 1. ‰∫∫Ê∞ó„Ç®„Éî„ÇΩ„Éº„Éâ„ÇíÂèñÂæó
    const episodesResponse = await fetch(
      `${SUPABASE_URL}/rest/v1/episodes?select=id,title&order=view_count.desc.nullslast&limit=10`,
      {
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
        }
      }
    )
    const episodes = await episodesResponse.json()
    console.log(`üìã ‰∫∫Ê∞ó„Ç®„Éî„ÇΩ„Éº„ÉâTOP10„ÇíÂèñÂæó\n`)

    // 2. „É≠„Ç±„Éº„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíËøΩÂä†ÔºàÊúùÈ£ü„Ç∑„É™„Éº„Ç∫„Å™„Å©Ôºâ
    const locations = [
      {
        id: generateId('„Çπ„Ç∑„É≠„Éº'),
        name: '„Çπ„Ç∑„É≠„Éº',
        description: '#248„ÄêÊúùÈ£ü„Ç∑„É™„Éº„Ç∫„Äë„ÅßË®™Âïè„ÄÇÊúù„Åã„Çâ„ÅäÂØøÂè∏„ÇíÊ•Ω„Åó„ÇÄ„Çà„Å´„ÅÆ„É°„É≥„Éê„Éº„ÅÆÂÆöÁï™„Çπ„Éù„ÉÉ„Éà',
        category: 'restaurant',
        address: 'Êù±‰∫¨ÈÉΩÂÜÖÂêÑÂ∫óËàó',
        google_place_id: null,
        lat: 35.6762,
        lng: 139.6503,
        episode_ids: episodes.filter(ep => ep.title.includes('„Çπ„Ç∑„É≠„Éº')).map(ep => ep.id)
      },
      {
        id: generateId('ÁÑºËÇâÂ∫óÔºàÊúùÁÑºËÇâÔºâ'),
        name: 'ÁÑºËÇâÂ∫óÔºàÊúùÁÑºËÇâÔºâ',
        description: '#446„ÄêÊúùÈ£ü!!„ÄëËÇâËÇâËÇâËÇâËÇâËÇâËÇâÊó•„ÅßË®™Âïè„ÄÇÊúù„Åã„ÇâÁÑºËÇâ„ÇíÊ•Ω„Åó„ÇÄË¥ÖÊ≤¢„Å™ÊôÇÈñì',
        category: 'restaurant',
        address: 'Êù±‰∫¨ÈÉΩÂÜÖ',
        google_place_id: null,
        lat: 35.6812,
        lng: 139.7671,
        episode_ids: episodes.filter(ep => ep.title.includes('ËÇâ')).map(ep => ep.id)
      },
      {
        id: generateId('„Éâ„É©„Ç§„Éñ„Çπ„Éù„ÉÉ„Éà'),
        name: '„ÅäÂè∞Â†¥„Éª„É¨„Ç§„É≥„Éú„Éº„Éñ„É™„ÉÉ„Ç∏',
        description: '„Éâ„É©„Ç§„Éñ„Ç∑„É™„Éº„Ç∫„Åß„Çà„ÅèÈÄö„Çã„É´„Éº„Éà„ÄÇÂ§úÊôØ„ÅåÁæé„Åó„ÅÑÂÆöÁï™„Ç≥„Éº„Çπ',
        category: 'landmark',
        address: 'Êù±‰∫¨ÈÉΩÊ∏ØÂå∫Âè∞Â†¥',
        google_place_id: null,
        lat: 35.6309,
        lng: 139.7772,
        episode_ids: episodes.filter(ep => ep.title.includes('„Éâ„É©„Ç§„Éñ')).map(ep => ep.id)
      },
      {
        id: generateId('„Ç´„Éï„Çß'),
        name: '„Åä„Åó„ÇÉ„Çå„Ç´„Éï„ÇßÔºàÈÉΩÂÜÖÔºâ',
        description: '„É°„É≥„Éê„Éº„Åå„Çà„ÅèÈõÜ„Åæ„Å£„Å¶Ë©±„Çí„Åô„Çã„Ç´„Éï„Çß„ÄÇËêΩ„Å°ÁùÄ„ÅÑ„ÅüÈõ∞Âõ≤Ê∞ó',
        category: 'cafe',
        address: 'Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫',
        google_place_id: null,
        lat: 35.6580,
        lng: 139.7016,
        episode_ids: []
      },
      {
        id: generateId('„Ç§„Ç±‰∏∏Ê∞¥Áî£'),
        name: '„Ç§„Ç±‰∏∏Ê∞¥Áî£',
        description: '„Äê„Åì„Çå„ÅåÂõõÁî∑„Å†„Äë„Ç§„Ç±‰∏∏Ê∞¥Áî£üêü „ÅßË®™Âïè„ÄÇÊµ∑ÈÆÆ„ÇíÊ•Ω„Åó„ÇÄ„Çπ„Éù„ÉÉ„Éà',
        category: 'restaurant',
        address: 'Êù±‰∫¨ÈÉΩÂÜÖ',
        google_place_id: null,
        lat: 35.6895,
        lng: 139.6917,
        episode_ids: episodes.filter(ep => ep.title.includes('„Ç§„Ç±‰∏∏')).map(ep => ep.id)
      }
    ]

    console.log('üìç „É≠„Ç±„Éº„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇíËøΩÂä†‰∏≠...')
    for (const location of locations) {
      const response = await fetch(`${SUPABASE_URL}/rest/v1/locations`, {
        method: 'POST',
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json',
          'Prefer': 'return=minimal'
        },
        body: JSON.stringify(location)
      })
      
      if (response.ok) {
        console.log(`   ‚úÖ ${location.name}`)
      } else {
        const error = await response.text()
        console.log(`   ‚ùå ${location.name}: ${error}`)
      }
    }

    // 3. „Ç¢„Ç§„ÉÜ„É†ÊÉÖÂ†±„ÇíËøΩÂä†
    const items = [
      {
        id: generateId('ÁôΩ„ÅÑ„Ç≥„Éº„Éà'),
        name: 'ÁôΩ„ÅÑ„É≠„É≥„Ç∞„Ç≥„Éº„Éà',
        description: 'Â±±Áî∞Ê∂º‰ªã„Åï„Çì„Åå„Çà„ÅèÁùÄÁî®„Åó„Å¶„ÅÑ„ÇãÁôΩ„ÅÑ„É≠„É≥„Ç∞„Ç≥„Éº„Éà„ÄÇ„Ç®„É¨„Ç¨„É≥„Éà„Å™Âç∞Ë±°',
        category: 'fashion',
        brand: '‰∏çÊòéÔºàË™øÊüª‰∏≠Ôºâ',
        price: null,
        url: null,
        image_url: null,
        episode_ids: []
      },
      {
        id: generateId('Èªí„Ç≠„É£„ÉÉ„Éó'),
        name: 'Èªí„ÅÆ„Ç≠„É£„ÉÉ„Éó',
        description: 'ÁµåÁêÜ„Åï„Çì„Åå„Çà„ÅèË¢´„Å£„Å¶„ÅÑ„ÇãÈªí„ÅÑ„Ç≠„É£„ÉÉ„Éó„ÄÇ#438„ÅßË©±È°å„Å´',
        category: 'fashion',
        brand: 'NEW ERAÔºàÊé®ÂÆöÔºâ',
        price: 6000,
        url: null,
        image_url: null,
        episode_ids: episodes.filter(ep => ep.title.includes('ÁµåÁêÜ')).map(ep => ep.id)
      },
      {
        id: generateId('„Çµ„É≥„Ç∞„É©„Çπ'),
        name: '„Çµ„É≥„Ç∞„É©„ÇπÔºà„Éâ„É©„Ç§„ÉñÁî®Ôºâ',
        description: '„Éâ„É©„Ç§„Éñ„Ç∑„É™„Éº„Ç∫„Åß„Çà„ÅèÁùÄÁî®„Åó„Å¶„ÅÑ„Çã„Çµ„É≥„Ç∞„É©„Çπ',
        category: 'fashion',
        brand: 'Ray-BanÔºàÊé®ÂÆöÔºâ',
        price: 20000,
        url: null,
        image_url: null,
        episode_ids: episodes.filter(ep => ep.title.includes('„Éâ„É©„Ç§„Éñ')).map(ep => ep.id)
      },
      {
        id: generateId('T„Ç∑„É£„ÉÑ'),
        name: '„É≠„Ç¥T„Ç∑„É£„ÉÑ',
        description: '„Ç´„Ç∏„É•„Ç¢„É´„Å™ÊíÆÂΩ±„Åß„Çà„ÅèÁùÄÁî®„Åó„Å¶„ÅÑ„ÇãT„Ç∑„É£„ÉÑ',
        category: 'fashion',
        brand: '‰∏çÊòé',
        price: null,
        url: null,
        image_url: null,
        episode_ids: []
      },
      {
        id: generateId('ËÖïÊôÇË®à'),
        name: 'È´òÁ¥öËÖïÊôÇË®à',
        description: '„Çª„É¨„ÉñÂõû„ÅßÁùÄÁî®„Åó„Å¶„ÅÑ„ÅüÈ´òÁ¥öËÖïÊôÇË®à',
        category: 'accessories',
        brand: 'ROLEXÔºàÊé®ÂÆöÔºâ',
        price: null,
        url: null,
        image_url: null,
        episode_ids: episodes.filter(ep => ep.title.includes('„Çª„É¨„Éñ')).map(ep => ep.id)
      }
    ]

    console.log('\nüëó „Ç¢„Ç§„ÉÜ„É†ÊÉÖÂ†±„ÇíËøΩÂä†‰∏≠...')
    for (const item of items) {
      const response = await fetch(`${SUPABASE_URL}/rest/v1/items`, {
        method: 'POST',
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json',
          'Prefer': 'return=minimal'
        },
        body: JSON.stringify(item)
      })
      
      if (response.ok) {
        console.log(`   ‚úÖ ${item.name}`)
      } else {
        const error = await response.text()
        console.log(`   ‚ùå ${item.name}: ${error}`)
      }
    }

    // 4. ÁµêÊûúÁ¢∫Ë™ç
    const locationsCount = await fetch(`${SUPABASE_URL}/rest/v1/locations?select=id`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    })
    const locationsData = await locationsCount.json()

    const itemsCount = await fetch(`${SUPABASE_URL}/rest/v1/items?select=id`, {
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
      }
    })
    const itemsData = await itemsCount.json()

    console.log('\nüìä „Éá„Éº„ÇøËøΩÂä†ÂÆå‰∫Ü:')
    console.log(`   üìç „É≠„Ç±„Éº„Ç∑„Éß„É≥: ${locationsData.length}‰ª∂`)
    console.log(`   üëó „Ç¢„Ç§„ÉÜ„É†: ${itemsData.length}‰ª∂`)

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message)
  }
}

// ÂÆüË°å
addItemsAndLocations()
  .then(() => {
    console.log('\n‚ú® ËøΩÂä†ÂÆå‰∫ÜÔºÅ')
    console.log('üåê Á¢∫Ë™çURL: https://develop--oshikatsu-collection.netlify.app')
    console.log('\nüìù Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:')
    console.log('   1. „Çµ„Ç§„Éà„Åß„Ç¢„Ç§„ÉÜ„É†„Éª„É≠„Ç±„Éº„Ç∑„Éß„É≥„Éö„Éº„Ç∏„ÇíÁ¢∫Ë™ç')
    console.log('   2. „Ç®„Éî„ÇΩ„Éº„ÉâË©≥Á¥∞„Éö„Éº„Ç∏„ÅßÈñ¢ÈÄ£ÊÉÖÂ†±Ë°®Á§∫„ÇíÁ¢∫Ë™ç')
    console.log('   3. „Åï„Çâ„Å´Ë©≥Á¥∞„Å™ÊÉÖÂ†±„ÇíËøΩÂä†')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå „Ç®„É©„Éº:', error)
    process.exit(1)
  })