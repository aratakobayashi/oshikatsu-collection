#!/usr/bin/env node

/**
 * „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Çø„Ç∞‰ªò„Åë„Ç∑„Çπ„ÉÜ„É†
 * SEOÂäπÊûúÁöÑ„Å™„Çø„Ç∞„ÇíËá™ÂãïÁîüÊàê„ÉªÂàÜÈ°û
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'
import * as fs from 'fs'

dotenv.config({ path: '.env.production' })

const supabaseUrl = process.env.VITE_SUPABASE_URL!
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

// „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Çø„Ç∞ÂàÜÈ°û„Ç∑„Çπ„ÉÜ„É†
const tagCategories = {
  // Â∫óËàó„Ç´„ÉÜ„Ç¥„É™„Éº
  restaurant_type: {
    patterns: [
      { keywords: ['„É©„Éº„É°„É≥', 'È∫∫'], tags: ['„É©„Éº„É°„É≥', 'È∫∫È°û', '‰∫∫Ê∞ó„É©„Éº„É°„É≥Â∫ó'] },
      { keywords: ['ÂØøÂè∏'], tags: ['ÂØøÂè∏', 'ÂíåÈ£ü', 'Ê±üÊà∏ÂâçÂØøÂè∏'] },
      { keywords: ['ÁÑºËÇâ'], tags: ['ÁÑºËÇâ', 'ÈüìÂõΩÊñôÁêÜ', 'BBQ'] },
      { keywords: ['‰∏≠ËèØ'], tags: ['‰∏≠ËèØÊñôÁêÜ', '„Ç¢„Ç∏„Ç¢„É≥', '‰∏≠ÂõΩÊñôÁêÜ'] },
      { keywords: ['„Ç§„Çø„É™„Ç¢„É≥', '„Éî„Ç∂', '„Éë„Çπ„Çø'], tags: ['„Ç§„Çø„É™„Ç¢„É≥', 'Ê¥ãÈ£ü', '„Éî„Ç∂'] },
      { keywords: ['„Éï„É¨„É≥„ÉÅ'], tags: ['„Éï„É¨„É≥„ÉÅ', 'Ê¥ãÈ£ü', 'È´òÁ¥öÊñôÁêÜ'] },
      { keywords: ['„Ç´„Éï„Çß', '„Ç≥„Éº„Éí„Éº'], tags: ['„Ç´„Éï„Çß', '„Ç≥„Éº„Éí„Éº', 'Âñ´Ëå∂Â∫ó'] },
      { keywords: ['„Éê„Éº', 'Â±ÖÈÖíÂ±ã'], tags: ['„Éê„Éº', 'Â±ÖÈÖíÂ±ã', '„ÅäÈÖí'] },
      { keywords: ['ÂÆöÈ£ü', 'È£üÂ†Ç'], tags: ['ÂÆöÈ£ü', 'È£üÂ†Ç', 'ÂÆ∂Â∫≠ÊñôÁêÜ'] },
      { keywords: ['„Åù„Å∞', '„ÅÜ„Å©„Çì'], tags: ['È∫∫È°û', 'ÂíåÈ£ü', '„Åù„Å∞„Éª„ÅÜ„Å©„Çì'] }
    ]
  },
  
  // Âú∞Âüü„Ç´„ÉÜ„Ç¥„É™„Éº
  location: {
    patterns: [
      { keywords: ['ÈäÄÂ∫ß'], tags: ['ÈäÄÂ∫ß', 'Êù±‰∫¨', 'È´òÁ¥ö„Ç®„É™„Ç¢'] },
      { keywords: ['Ê∏ãË∞∑'], tags: ['Ê∏ãË∞∑', 'Êù±‰∫¨', 'Ëã•ËÄÖ„ÅÆË°ó'] },
      { keywords: ['Êñ∞ÂÆø'], tags: ['Êñ∞ÂÆø', 'Êù±‰∫¨', 'ÁπÅËèØË°ó'] },
      { keywords: ['Ê±†Ë¢ã'], tags: ['Ê±†Ë¢ã', 'Êù±‰∫¨', '„Çµ„É≥„Ç∑„É£„Ç§„É≥„Ç∑„ÉÜ„Ç£'] },
      { keywords: ['ÂéüÂÆø', 'Ë°®ÂèÇÈÅì'], tags: ['ÂéüÂÆø„ÉªË°®ÂèÇÈÅì', 'Êù±‰∫¨', '„Éï„Ç°„ÉÉ„Ç∑„Éß„É≥'] },
      { keywords: ['ÂÖ≠Êú¨Êú®'], tags: ['ÂÖ≠Êú¨Êú®', 'Êù±‰∫¨', '„Éä„Ç§„Éà„É©„Ç§„Éï'] },
      { keywords: ['È∫ªÂ∏É'], tags: ['È∫ªÂ∏É', 'Êù±‰∫¨', 'È´òÁ¥ö‰ΩèÂÆÖË°ó'] },
      { keywords: ['ÁØâÂú∞'], tags: ['ÁØâÂú∞', 'Êù±‰∫¨', 'Â∏ÇÂ†¥„Ç∞„É´„É°'] },
      { keywords: ['ÊµÖËçâ'], tags: ['ÊµÖËçâ', 'Êù±‰∫¨', '‰∏ãÁî∫'] },
      { keywords: ['ÂêâÁ••ÂØ∫'], tags: ['ÂêâÁ••ÂØ∫', 'Êù±‰∫¨', '‰Ωè„Åø„Åü„ÅÑË°ó'] },
      { keywords: ['Ê®™Êµú'], tags: ['Ê®™Êµú', 'Á•ûÂ•àÂ∑ù', '„Åø„Å™„Å®„Åø„Çâ„ÅÑ'] },
      { keywords: ['Â§ßÈò™'], tags: ['Â§ßÈò™', 'Èñ¢Ë•ø', '„Ç∞„É´„É°„ÅÆË°ó'] }
    ]
  },
  
  // „Çª„É¨„Éñ„É™„ÉÜ„Ç£„Ç´„ÉÜ„Ç¥„É™„Éº
  celebrity: {
    patterns: [
      { keywords: ['ÊùæÈáçË±ä'], tags: ['ÊùæÈáçË±ä', 'Â≠§Áã¨„ÅÆ„Ç∞„É´„É°', '„Ç∞„É´„É°„É≠„Ç±'] },
      { keywords: ['SixTONES'], tags: ['SixTONES', '„Ç∏„É£„Éã„Éº„Ç∫', '„Ç¢„Ç§„Éâ„É´'] },
      { keywords: ['Snow Man'], tags: ['Snow Man', '„Ç∏„É£„Éã„Éº„Ç∫', '„Ç¢„Ç§„Éâ„É´'] },
      { keywords: ['‚â†ME'], tags: ['‚â†ME', 'Â•≥ÊÄß„Ç¢„Ç§„Éâ„É´', 'ÊåáÂéüËéâ‰πÉ„Éó„É≠„Éá„É•„Éº„Çπ'] },
      { keywords: ['„Çà„Å´„ÅÆ„Å°„ÇÉ„Çì„Å≠„Çã'], tags: ['„Çà„Å´„ÅÆ„Å°„ÇÉ„Çì„Å≠„Çã', 'YouTuber', '„Ç®„É≥„Çø„Éº„ÉÜ„Ç§„É°„É≥„Éà'] },
      { keywords: ['‰∫ÄÊ¢®Âíå‰πü'], tags: ['‰∫ÄÊ¢®Âíå‰πü', 'KAT-TUN', '„Ç∏„É£„Éã„Éº„Ç∫'] },
      { keywords: ['‰∫åÂÆÆÂíå‰πü'], tags: ['‰∫åÂÆÆÂíå‰πü', 'Âµê', '„Ç∏„É£„Éã„Éº„Ç∫'] },
      { keywords: ['=LOVE'], tags: ['=LOVE', 'Â•≥ÊÄß„Ç¢„Ç§„Éâ„É´', 'ÊåáÂéüËéâ‰πÉ„Éó„É≠„Éá„É•„Éº„Çπ'] }
    ]
  },
  
  // ÁâπÂæ¥„Ç´„ÉÜ„Ç¥„É™„Éº
  characteristics: {
    patterns: [
      { keywords: ['ËÄÅËàó'], tags: ['ËÄÅËàó', '‰ºùÁµ±', 'Ê≠¥Âè≤„ÅÇ„ÇãÂ∫ó'] },
      { keywords: ['ÊúâÂêç', '‰∫∫Ê∞ó'], tags: ['‰∫∫Ê∞óÂ∫ó', 'ÊúâÂêçÂ∫ó', 'Ë©±È°å'] },
      { keywords: ['È´òÁ¥ö', '„Éü„Ç∑„É•„É©„É≥'], tags: ['È´òÁ¥öÂ∫ó', '„Éü„Ç∑„É•„É©„É≥', 'ÁâπÂà•„Å™Êó•'] },
      { keywords: ['Èö†„ÇåÂÆ∂'], tags: ['Èö†„ÇåÂÆ∂', 'Á©¥Â†¥', 'Áü•„Çã‰∫∫„ÅûÁü•„Çã'] },
      { keywords: ['Â§úÊôØ', 'ÊôØËâ≤'], tags: ['Â§úÊôØ', 'Áµ∂ÊôØ', '„Éá„Éº„Éà'] },
      { keywords: ['È£ü„ÅπÊîæÈ°å', '„Éê„Ç§„Ç≠„É≥„Ç∞'], tags: ['È£ü„ÅπÊîæÈ°å', '„Éê„Ç§„Ç≠„É≥„Ç∞', '„Éú„É™„É•„Éº„É†Ê∫ÄÁÇπ'] },
      { keywords: ['„ÉÜ„Ç§„ÇØ„Ç¢„Ç¶„Éà'], tags: ['„ÉÜ„Ç§„ÇØ„Ç¢„Ç¶„Éà', '„ÅäÊåÅ„Å°Â∏∞„Çä', '„Éá„É™„Éê„É™„Éº'] }
    ]
  },
  
  // ‰ΩìÈ®ì„Ç´„ÉÜ„Ç¥„É™„Éº
  experience: {
    patterns: [
      { keywords: ['ËÅñÂú∞Â∑°Á§º'], tags: ['ËÅñÂú∞Â∑°Á§º', '„É≠„Ç±Âú∞', '„Éï„Ç°„É≥ÂøÖË¶ã'] },
      { keywords: ['„Éá„Éº„Éà'], tags: ['„Éá„Éº„Éà', '„Ç´„ÉÉ„Éó„É´', '„É≠„Éû„É≥„ÉÅ„ÉÉ„ÇØ'] },
      { keywords: ['‰∏Ä‰∫∫È£Ø', '‰∏Ä‰∫∫'], tags: ['‰∏Ä‰∫∫È£Ø', '„ÇΩ„É≠Ê¥ª', '„Åä„Å≤„Å®„Çä„Åï„Åæ'] },
      { keywords: ['Â•≥Â≠ê‰ºö'], tags: ['Â•≥Â≠ê‰ºö', 'ÂèãÈÅî', '„Ç§„É≥„Çπ„ÇøÊò†„Åà'] },
      { keywords: ['ÂÆ∂Êóè'], tags: ['„Éï„Ç°„Éü„É™„Éº', 'ÂÆ∂ÊóèÈÄ£„Çå', 'Â≠êÈÄ£„ÇåOK'] }
    ]
  }
}

function generateSemanticTags(location: any): string[] {
  const name = location.name || ''
  const description = location.description || ''
  const address = location.address || ''
  const currentTags = location.tags || []
  const episodes = location.episode_locations || []
  
  // „Çª„É¨„Éñ„É™„ÉÜ„Ç£ÊÉÖÂ†±
  const celebrities = [...new Set(episodes.map(ep => 
    ep.episodes?.celebrities?.name).filter(Boolean))]
  
  // Ê§úÁ¥¢ÂØæË±°„ÉÜ„Ç≠„Çπ„Éà
  const searchText = `${name} ${description} ${address} ${currentTags.join(' ')} ${celebrities.join(' ')}`.toLowerCase()
  
  const generatedTags = new Set(currentTags) // Êó¢Â≠ò„Çø„Ç∞„Çí‰øùÊåÅ
  
  // ÂêÑ„Ç´„ÉÜ„Ç¥„É™„Éº„Åß„Çø„Ç∞ÁîüÊàê
  for (const [category, config] of Object.entries(tagCategories)) {
    for (const pattern of config.patterns) {
      if (pattern.keywords.some(keyword => searchText.includes(keyword.toLowerCase()))) {
        pattern.tags.forEach(tag => generatedTags.add(tag))
      }
    }
  }
  
  // „Çª„É¨„Éñ„É™„ÉÜ„Ç£Âõ∫Êúâ„Çø„Ç∞
  celebrities.forEach(celeb => {
    generatedTags.add(celeb)
    generatedTags.add(`${celeb}„É≠„Ç±Âú∞`)
    generatedTags.add('ËÅñÂú∞Â∑°Á§º')
  })
  
  // „Ç®„Éî„ÇΩ„Éº„ÉâÊï∞„Å´„Çà„Çã„Çø„Ç∞
  const episodeCount = episodes.length
  if (episodeCount > 1) {
    generatedTags.add('‰∫∫Ê∞ó„É≠„Ç±Âú∞')
    generatedTags.add('Ë§áÊï∞ÂõûÁôªÂ†¥')
  }
  
  // „Çø„Éô„É≠„Ç∞URL„Åå„ÅÇ„ÇãÂ†¥Âêà
  if (location.tabelog_url) {
    generatedTags.add('È£ü„Åπ„É≠„Ç∞Êé≤Ëºâ')
    generatedTags.add('‰∫∫Ê∞óÂ∫ó')
  }
  
  // ‰ΩèÊâÄ„Éô„Éº„Çπ„ÅÆÂú∞Âüü„Çø„Ç∞
  if (address) {
    if (address.includes('Êù±‰∫¨')) generatedTags.add('Êù±‰∫¨')
    if (address.includes('Á•ûÂ•àÂ∑ù')) generatedTags.add('Á•ûÂ•àÂ∑ù')
    if (address.includes('Â§ßÈò™')) generatedTags.add('Â§ßÈò™')
    if (address.includes('‰∫¨ÈÉΩ')) generatedTags.add('‰∫¨ÈÉΩ')
  }
  
  return Array.from(generatedTags).slice(0, 15) // ‰∏äÈôê15ÂÄã
}

async function generateTagsForAllLocations() {
  console.log('üè∑Ô∏è „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Çø„Ç∞ÁîüÊàê„Ç∑„Çπ„ÉÜ„É†')
  console.log('='.repeat(60))
  
  // ÂÖ®„Éá„Éº„ÇøÂèñÂæó
  const { data: locations, error } = await supabase
    .from('locations')
    .select(`
      id, name, address, description, tags,
      tabelog_url, website_url, phone, opening_hours,
      episode_locations(
        id, episode_id,
        episodes(id, title, celebrities(name))
      )
    `)
  
  if (error) {
    throw new Error(`„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: ${error.message}`)
  }
  
  console.log(`üìä Âá¶ÁêÜÂØæË±°: ${locations.length}‰ª∂`)
  
  // „Çø„Ç∞„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„ÇíÂÑ™ÂÖà
  const needsTags = locations.filter(loc => 
    !loc.tags || loc.tags.length < 5
  )
  
  console.log(`üéØ „Çø„Ç∞Âº∑ÂåñÂØæË±°: ${needsTags.length}‰ª∂`)
  
  // „Çø„Ç∞ÁîüÊàêÁµêÊûú
  const tagResults = []
  
  console.log('\nüè∑Ô∏è „ÄêÁîüÊàê„Åï„Çå„Åü„Çø„Ç∞„Çµ„É≥„Éó„É´„Äë')
  console.log('='.repeat(50))
  
  needsTags.slice(0, 10).forEach((loc, i) => {
    const originalTags = loc.tags || []
    const generatedTags = generateSemanticTags(loc)
    const newTags = generatedTags.filter(tag => !originalTags.includes(tag))
    
    tagResults.push({
      id: loc.id,
      name: loc.name,
      originalTags,
      generatedTags,
      newTags
    })
    
    console.log(`${i+1}. ${loc.name}`)
    console.log(`   ÂÖÉ„ÅÆ„Çø„Ç∞ (${originalTags.length}): ${originalTags.slice(0, 3).join(', ')}${originalTags.length > 3 ? '...' : ''}`)
    console.log(`   Êñ∞„Åó„ÅÑ„Çø„Ç∞ (${generatedTags.length}): ${generatedTags.slice(0, 5).join(', ')}${generatedTags.length > 5 ? '...' : ''}`)
    console.log(`   ËøΩÂä†„Çø„Ç∞Êï∞: ${newTags.length}`)
    console.log('')
  })
  
  // ÂÖ®„Éá„Éº„Çø„ÅÆ„Çø„Ç∞ÁîüÊàê
  const allTagResults = locations.map(loc => ({
    id: loc.id,
    name: loc.name,
    originalTags: loc.tags || [],
    generatedTags: generateSemanticTags(loc),
    needsUpdate: !loc.tags || loc.tags.length < 5
  }))
  
  // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éï„Ç°„Ç§„É´‰ΩúÊàê
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
  const backupFile = `generated-tags-${timestamp}.json`
  
  fs.writeFileSync(backupFile, JSON.stringify(allTagResults, null, 2))
  console.log(`üíæ „Çø„Ç∞ÁîüÊàêÁµêÊûú‰øùÂ≠ò: ${backupFile}`)
  
  // „Çø„Ç∞Áµ±Ë®àÂàÜÊûê
  const allNewTags = new Map()
  allTagResults.forEach(result => {
    result.generatedTags.forEach(tag => {
      allNewTags.set(tag, (allNewTags.get(tag) || 0) + 1)
    })
  })
  
  const topNewTags = Array.from(allNewTags.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 20)
  
  console.log('\nüìä „ÄêÁîüÊàê„Åï„Çå„Åü„Çø„Ç∞Áµ±Ë®à TOP20„Äë')
  console.log('='.repeat(40))
  topNewTags.forEach(([tag, count], i) => {
    console.log(`${i+1}. "${tag}": ${count}‰ª∂`)
  })
  
  console.log('\nüìä „Äê„Çø„Ç∞ÁîüÊàêÁµ±Ë®à„Äë')
  console.log('='.repeat(30))
  console.log(`Á∑èÂá¶ÁêÜÊï∞: ${locations.length}‰ª∂`)
  console.log(`Âº∑ÂåñÂØæË±°: ${needsTags.length}‰ª∂`)
  console.log(`Âπ≥Âùá„Çø„Ç∞Êï∞Âêë‰∏ä: ${Math.round(allTagResults.filter(r => r.needsUpdate).reduce((sum, r) => sum + (r.generatedTags.length - r.originalTags.length), 0) / needsTags.length)}ÂÄã`)
  console.log(`Êñ∞Ë¶è„Çø„Ç∞Á®ÆÈ°û: ${allNewTags.size}Á®ÆÈ°û`)
  
  return {
    totalLocations: locations.length,
    needsUpdate: needsTags.length,
    tagResults: allTagResults,
    backupFile,
    newTagTypes: allNewTags.size
  }
}

// ÂÆüË°å
generateTagsForAllLocations()
  .then(result => {
    console.log(`\n‚úÖ „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Çø„Ç∞ÁîüÊàêÂÆå‰∫Ü!`)
    console.log(`   Âá¶ÁêÜ: ${result.totalLocations}‰ª∂`)
    console.log(`   Âº∑ÂåñÂØæË±°: ${result.needsUpdate}‰ª∂`)
    console.log(`   Êñ∞Ë¶è„Çø„Ç∞Á®ÆÈ°û: ${result.newTagTypes}Á®ÆÈ°û`)
    console.log(`   „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó: ${result.backupFile}`)
    console.log('\nüöÄ Ê¨°„Çπ„ÉÜ„ÉÉ„Éó: „Çø„Ç∞„Éá„Éº„Çø„Éô„Éº„ÇπÊõ¥Êñ∞„ÅÆÊ∫ñÂÇôÂÆå‰∫Ü')
  })
  .catch(error => {
    console.error('‚ùå „Çø„Ç∞ÁîüÊàê„Ç®„É©„Éº:', error)
  })