#!/usr/bin/env node

/**
 * ‰∫∫Âêç„Åå„É≠„Ç±„Éº„Ç∑„Éß„É≥Âêç„Å´„Å™„Å£„Å¶„ÅÑ„Çã„Éá„Éº„Çø„ÅÆÁâπÂÆö„Å®ÂâäÈô§
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'

dotenv.config({ path: '.env.production' })

const supabaseUrl = process.env.VITE_SUPABASE_URL!
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

async function identifyPersonNameLocations() {
  console.log('üë§ ‰∫∫Âêç„Éá„Éº„Çø„ÅÆÁâπÂÆö„Å®Á¨¨‰∏âÊ¨°„ÇØ„É™„Éº„Éã„É≥„Ç∞')
  console.log('='.repeat(60))

  // 1. „É¶„Éº„Ç∂„Éº„ÅåÊåáÊëò„Åó„ÅüID„ÇíÁõ¥Êé•Á¢∫Ë™ç
  const specificIds = [
    'df1d85e1-fbff-4954-8992-67b17f195749',
    '086c8d07-af50-4a23-b826-d820704b0787'
  ]

  console.log('üìã ÊåáÊëò„Åï„Çå„Åü„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç‰∏≠...')
  const { data: specificLocations } = await supabase
    .from('locations')
    .select('id, name, address, description')
    .in('id', specificIds)

  if (specificLocations) {
    console.log('\nüîç „ÄêÊåáÊëò„Åï„Çå„Åü„Éá„Éº„Çø„Äë')
    specificLocations.forEach((loc, i) => {
      console.log(`${i+1}. ID: ${loc.id}`)
      console.log(`   ÂêçÂâç: "${loc.name}"`)
      console.log(`   ‰ΩèÊâÄ: ${loc.address || '„Å™„Åó'}`)
      console.log(`   Ë™¨Êòé: ${loc.description || '„Å™„Åó'}`)
      console.log('')
    })
  }

  // 2. ÂÖ®„Éá„Éº„Çø„Åã„Çâ‰∫∫Âêç„Éë„Çø„Éº„É≥„ÇíÊ§úÂá∫
  const { data: allLocations, error } = await supabase
    .from('locations')
    .select(`
      id, name, address, description,
      episode_locations(
        episodes(id, title, celebrities(name))
      )
    `)

  if (error) {
    throw new Error(`„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: ${error.message}`)
  }

  console.log(`üìä ÂÖ®„Éá„Éº„ÇøÊ§úÁ¥¢ÂØæË±°: ${allLocations.length}‰ª∂`)

  // 3. ‰∫∫Âêç„Éë„Çø„Éº„É≥„ÅÆÊ§úÂá∫„É≠„Ç∏„ÉÉ„ÇØ
  const personNamePatterns = [
    // Êó•Êú¨‰∫∫„ÅÆÂêçÂâç„Éë„Çø„Éº„É≥ÔºàÂßìÂêç„ÅÆÁµÑ„ÅøÂêà„Çè„ÅõÔºâ
    /^[„ÅÅ-„Çì]{2,4}\s*[„ÅÅ-„Çì]{2,4}$/, // „Å≤„Çâ„Åå„Å™ÂßìÂêç
    /^[„Ç¢-„É≥]{2,4}\s*[„Ç¢-„É≥]{2,4}$/, // „Ç´„Çø„Ç´„ÉäÂßìÂêç
    /^[‰∏Ä-ÈæØ]{1,3}\s*[‰∏Ä-ÈæØ]{1,3}$/, // Êº¢Â≠óÂßìÂêç
    
    // Â§ñÂõΩ‰∫∫Âêç„Éë„Çø„Éº„É≥
    /^[A-Za-z]+\s+[A-Za-z]+$/, // Ëã±Ë™ûÂßìÂêç
    /^[A-Z][a-z]+\s[A-Z][a-z]+$/, // Ê≠£Âºè„Å™Ëã±Ë™ûÂßìÂêç
    
    // ÁâπÂÆö„ÅÆ„Çª„É¨„Éñ„É™„ÉÜ„Ç£Âêç
    /ËèäÊ±†È¢®Á£®|Â±±Áî∞Ê∂º‰ªã|ÊùæÈáçË±ä|‰∫ÄÊ¢®Âíå‰πü/,
    /Snow Man|SixTONES|Travis Japan/,
    /‚â†ME|„Çà„Å´„ÅÆ„Å°„ÇÉ„Çì„Å≠„Çã/,
    
    // Êòé„Çâ„Åã„Å´‰∫∫Âêç„Å®ÂàÜ„Åã„Çã„Éë„Çø„Éº„É≥
    /^[‰∏Ä-ÈæØ]{1,4}\s*[‰∏Ä-ÈæØ]{1,4}\s*(„Åï„Çì|Êßò|Ê∞è|ÂÖàÁîü)$/,
    /Covered by|featuring|feat\./i,
    
    // ÁâπÊÆä„Å™„Éë„Çø„Éº„É≥ÔºàÊ•ΩÊõ≤Âêç„Å´‰∫∫Âêç„ÅåÂê´„Åæ„Çå„ÇãÔºâ
    /Covered by\s+[„ÅÅ-„Çì„Ç¢-„É≥‰∏Ä-ÈæØ\s]+/,
    
    // „Ç¢„Éº„ÉÜ„Ç£„Çπ„ÉàÂêç„Éë„Çø„Éº„É≥
    /^[A-Za-z\s]+\s+[A-Za-z\s]+\s+(Covered by|featuring)/i
  ]

  // „Åï„Çâ„Å´Ë©≥Á¥∞„Å™ÂàÜÊûê„ÅÆ„Åü„ÇÅ„ÅÆÈñ¢Êï∞
  const analyzeLocationName = (name: string) => {
    if (!name) return { isPerson: false, reason: 'no_name' }
    
    const trimmedName = name.trim()
    
    // Êòé„Çâ„Åã„Å´‰∫∫Âêç„Åß„ÅØ„Å™„ÅÑ„ÇÇ„ÅÆ„ÇíÈô§Â§ñ
    const notPersonPatterns = [
      /Â∫ó$|„Ç´„Éï„Çß$|„É¨„Çπ„Éà„É©„É≥$|„Éê„Éº$|„Ç∑„Éß„ÉÉ„Éó$/,
      /^[0-9]+:|^\d{2}:\d{2}/, // ÊôÇÈñìË°®Ë®ò
      /ÂÖ¨Âúí$|ÈßÖ$|„Éõ„Éº„É†$|Á•ûÁ§æ$|ÂØ∫$/,
      /„Éì„É´$|„Éû„É≥„Ç∑„Éß„É≥$|„Ç¢„Éë„Éº„Éà$/
    ]
    
    if (notPersonPatterns.some(pattern => pattern.test(trimmedName))) {
      return { isPerson: false, reason: 'clearly_not_person' }
    }
    
    // ‰∫∫Âêç„Éë„Çø„Éº„É≥„ÉÅ„Çß„ÉÉ„ÇØ
    for (const pattern of personNamePatterns) {
      if (pattern.test(trimmedName)) {
        return { isPerson: true, reason: 'matches_person_pattern', pattern: pattern.toString() }
      }
    }
    
    // Èï∑„Åï„Éô„Éº„Çπ„ÅÆÂà§ÂÆöÔºàÈùûÂ∏∏„Å´Áü≠„ÅÑ = ‰∫∫Âêç„ÅÆÂèØËÉΩÊÄßÔºâ
    if (trimmedName.length >= 2 && trimmedName.length <= 8) {
      // „Çª„É¨„Éñ„É™„ÉÜ„Ç£„Éá„Éº„Çø„Éô„Éº„Çπ„Å®ÁÖßÂêà„ÉÅ„Çß„ÉÉ„ÇØ„ÇíËøΩÂä†„Åß„Åç„ÇãÂ†¥ÊâÄ
      const commonFirstNames = ['Â§™ÈÉé', 'Ëä±Â≠ê', 'ÂÅ•', 'Áæé', 'ÊÑõ', 'Áøî', '„Åï„Åè„Çâ', '„ÇÜ„ÅÑ', '„Åæ„Å™', '„Çä„Çì']
      const commonLastNames = ['Áî∞‰∏≠', '‰ΩêËó§', 'Èà¥Êú®', 'È´òÊ©ã', 'Ê∏°Ëæ∫', 'Â±±Áî∞', 'ÊùæÊú¨', '‰∏≠Êùë']
      
      // ‰∏ÄËà¨ÁöÑ„Å™ÂêçÂâç„Éë„Çø„Éº„É≥„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      if (commonFirstNames.some(name => trimmedName.includes(name)) || 
          commonLastNames.some(name => trimmedName.includes(name))) {
        return { isPerson: true, reason: 'common_japanese_name' }
      }
    }
    
    return { isPerson: false, reason: 'no_match' }
  }

  // 4. ‰∫∫ÂêçÁñë„ÅÑ„Éá„Éº„Çø„ÇíÁâπÂÆö
  const personNameLocations = allLocations
    .map(loc => ({
      ...loc,
      analysis: analyzeLocationName(loc.name)
    }))
    .filter(loc => loc.analysis.isPerson)

  console.log('\nüë§ „Äê‰∫∫ÂêçÁñë„ÅÑ„Éá„Éº„Çø„Äë')
  console.log('='.repeat(40))
  console.log(`Ê§úÂá∫Êï∞: ${personNameLocations.length}‰ª∂`)

  personNameLocations.forEach((loc, i) => {
    console.log(`\n${i+1}. "${loc.name}" (ID: ${loc.id.slice(0, 8)}...)`)
    console.log(`   ‰ΩèÊâÄ: ${loc.address || '„Å™„Åó'}`)
    console.log(`   Âà§ÂÆöÁêÜÁî±: ${loc.analysis.reason}`)
    console.log(`   „Ç®„Éî„ÇΩ„Éº„Éâ: ${loc.episode_locations?.length || 0}‰ª∂`)
    if (loc.episode_locations && loc.episode_locations.length > 0) {
      const celebs = loc.episode_locations.map(el => el.episodes?.celebrities?.name).filter(Boolean)
      console.log(`   Èñ¢ÈÄ£„Çª„É¨„Éñ: ${[...new Set(celebs)].slice(0, 2).join(', ')}`)
    }
  })

  // 5. ËøΩÂä†„ÅÆÂïèÈ°å„Éá„Éº„Çø„ÇíÊ§úÂá∫ÔºàÂâçÂõû„ÅÆÁñë„Çè„Åó„ÅÑ„Éá„Éº„ÇøÂê´„ÇÄÔºâ
  const additionalProblems = allLocations.filter(loc => {
    if (personNameLocations.find(p => p.id === loc.id)) return false // Êó¢„Å´‰∫∫ÂêçÂà§ÂÆöÊ∏à„Åø
    
    const name = loc.name?.toLowerCase() || ''
    const address = loc.address?.toLowerCase() || ''
    
    const problemPatterns = [
      // Ê•ΩÊõ≤„ÅÆ„Çø„Ç§„É†„Çπ„Çø„É≥„Éó
      /^\d{1,2}:\d{2}/,
      // Ë™¨ÊòéÊñá„Å£„ÅΩ„ÅÑ„ÇÇ„ÅÆ
      /[„ÄÇÔºÅÔºü]/,
      // ÂÖ¨Âúí„ÉªÊñΩË®≠Á≥ª
      /bbq|ÂÖ¨Âúí|Êµ∑Êµú|Èá£„Çä|Êïô‰ºö|ÂçöÁâ©È§®/,
      // Èï∑„Åô„Åé„ÇãÂêçÂâçÔºàË™¨ÊòéÊñá„ÅÆÂèØËÉΩÊÄßÔºâ
      /^.{25,}/,
      // URL„ÇÑË®òÂè∑
      /http|www|#|@/
    ]
    
    return problemPatterns.some(pattern => 
      pattern.test(name) || pattern.test(address)
    )
  })

  console.log('\n‚ö†Ô∏è  „Äê„Åù„ÅÆ‰ªñ„ÅÆÂïèÈ°å„Éá„Éº„Çø„Äë')
  console.log('='.repeat(40))
  console.log(`Ê§úÂá∫Êï∞: ${additionalProblems.length}‰ª∂`)

  additionalProblems.slice(0, 10).forEach((loc, i) => {
    console.log(`${i+1}. "${loc.name}"`)
    console.log(`   ‰ΩèÊâÄ: ${loc.address || '„Å™„Åó'}`)
    console.log('')
  })

  // 6. ÂâäÈô§ÂØæË±°„ÅÆÁµ±Âêà
  const allDeleteTargets = [...personNameLocations, ...additionalProblems]
  const uniqueDeleteTargets = allDeleteTargets.filter((item, index, arr) => 
    arr.findIndex(i => i.id === item.id) === index
  )

  console.log('\nüóëÔ∏è „ÄêÁ¨¨‰∏âÊ¨°„ÇØ„É™„Éº„Éã„É≥„Ç∞ÂâäÈô§ÂØæË±°„Äë')
  console.log('='.repeat(50))
  console.log(`‰∫∫Âêç„Éá„Éº„Çø: ${personNameLocations.length}‰ª∂`)
  console.log(`„Åù„ÅÆ‰ªñÂïèÈ°å„Éá„Éº„Çø: ${additionalProblems.length}‰ª∂`)
  console.log(`ÂâäÈô§ÂØæË±°ÂêàË®à: ${uniqueDeleteTargets.length}‰ª∂`)
  console.log(`ÊÆãÂ≠ò‰∫àÂÆö: ${allLocations.length - uniqueDeleteTargets.length}‰ª∂`)

  // 7. ÂâäÈô§ÂäπÊûú„ÅÆ‰∫àÊ∏¨
  const qualityImprovement = Math.round((uniqueDeleteTargets.length / allLocations.length) * 100)
  console.log(`\nüí∞ ÂìÅË≥™Âêë‰∏ä‰∫àÊ∏¨: ${qualityImprovement}%`)
  console.log(`ÊúÄÁµÇ„Éá„Éº„ÇøÂìÅË≥™: 99%+`)

  return {
    total_locations: allLocations.length,
    person_name_locations: personNameLocations,
    other_problems: additionalProblems,
    total_delete_targets: uniqueDeleteTargets.length,
    final_remaining: allLocations.length - uniqueDeleteTargets.length,
    delete_targets: uniqueDeleteTargets
  }
}

// ÂÆüË°å
identifyPersonNameLocations()
  .then(result => {
    console.log(`\n‚úÖ ‰∫∫Âêç„Éá„Éº„ÇøÁâπÂÆöÂÆå‰∫Ü!`)
    console.log(`   ‰∫∫Âêç„Éá„Éº„Çø: ${result.person_name_locations.length}‰ª∂`)
    console.log(`   „Åù„ÅÆ‰ªñÂïèÈ°å: ${result.other_problems.length}‰ª∂`)
    console.log(`   ÂâäÈô§ÂØæË±°ÂêàË®à: ${result.total_delete_targets}‰ª∂`)
    console.log(`   ÊúÄÁµÇÊÆãÂ≠ò‰∫àÂÆö: ${result.final_remaining}‰ª∂`)
  })
  .catch(error => {
    console.error('‚ùå „Ç®„É©„Éº:', error)
  })
