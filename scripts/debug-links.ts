/**
 * Â∫óËàó„Éª„Ç¢„Ç§„ÉÜ„É†„É™„É≥„ÇØÁä∂Ê≥Å„Éá„Éê„ÉÉ„Ç∞
 */

import { config } from 'dotenv'
import { createClient } from '@supabase/supabase-js'

config({ path: '.env' })

const supabase = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.VITE_SUPABASE_ANON_KEY!
)

async function debugLinks() {
  console.log('üîç Â∫óËàó„Éª„Ç¢„Ç§„ÉÜ„É†„É™„É≥„ÇØÁä∂Ê≥ÅÁ¢∫Ë™ç')
  console.log('='.repeat(50))
  
  try {
    // „Çà„Å´„ÅÆ„Å°„ÇÉ„Çì„Å≠„ÇãÂèñÂæó
    const { data: celebrity, error: celebError } = await supabase
      .from('celebrities')
      .select('id, name')
      .eq('slug', '„Çà„Å´„ÅÆ„Å°„ÇÉ„Çì„Å≠„Çã')
      .single()
    
    if (celebError || !celebrity) {
      console.log('‚ùå „Çà„Å´„ÅÆ„Å°„ÇÉ„Çì„Å≠„ÇãË¶ã„Å§„Åã„Çâ„Åö:', celebError?.message)
      return
    }
    
    console.log(`‚úÖ Celebrity: ${celebrity.name} (${celebrity.id})`)
    
    // „Ç®„Éî„ÇΩ„Éº„ÉâÁ¢∫Ë™ç
    const { data: episodes, error: epError } = await supabase
      .from('episodes')
      .select('id, title')
      .eq('celebrity_id', celebrity.id)
      .limit(5)
      
    if (epError) {
      console.log('‚ùå „Ç®„Éî„ÇΩ„Éº„ÉâÂèñÂæó„Ç®„É©„Éº:', epError.message)
      return
    }
      
    console.log(`üì∫ „Ç®„Éî„ÇΩ„Éº„ÉâÊï∞: ${episodes?.length || 0}‰ª∂`)
    episodes?.forEach((ep, idx) => {
      console.log(`  ${idx + 1}. ${ep.title} (${ep.id})`)
    })
    
    if (!episodes || episodes.length === 0) {
      console.log('‚ùå „Ç®„Éî„ÇΩ„Éº„Éâ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„É™„É≥„ÇØÁ¢∫Ë™ç„Çí„Çπ„Ç≠„ÉÉ„Éó')
      return
    }
    
    const episodeIds = episodes.map(ep => ep.id)
    
    // episode_locationsÁ¢∫Ë™ç
    console.log('\nüè™ Episode-Location „É™„É≥„ÇØÁ¢∫Ë™ç:')
    const { data: locLinks, error: locLinkError } = await supabase
      .from('episode_locations')
      .select('episode_id, location_id')
      .in('episode_id', episodeIds)
      
    if (locLinkError) {
      console.log('‚ùå Episode-LocationÂèñÂæó„Ç®„É©„Éº:', locLinkError.message)
    } else {
      console.log(`üìä Episode-Location „É™„É≥„ÇØÊï∞: ${locLinks?.length || 0}‰ª∂`)
      locLinks?.forEach((link, idx) => {
        console.log(`  ${idx + 1}. Episode: ${link.episode_id} ‚Üí Location: ${link.location_id}`)
      })
    }
    
    // episode_itemsÁ¢∫Ë™ç
    console.log('\nüõçÔ∏è Episode-Item „É™„É≥„ÇØÁ¢∫Ë™ç:')
    const { data: itemLinks, error: itemLinkError } = await supabase
      .from('episode_items')
      .select('episode_id, item_id')
      .in('episode_id', episodeIds)
      
    if (itemLinkError) {
      console.log('‚ùå Episode-ItemÂèñÂæó„Ç®„É©„Éº:', itemLinkError.message)
    } else {
      console.log(`üìä Episode-Item „É™„É≥„ÇØÊï∞: ${itemLinks?.length || 0}‰ª∂`)
      itemLinks?.forEach((link, idx) => {
        console.log(`  ${idx + 1}. Episode: ${link.episode_id} ‚Üí Item: ${link.item_id}`)
      })
    }
    
    // ÂÆüÈöõ„ÅÆlocationsÂèñÂæó„ÉÜ„Çπ„ÉàÔºàJOIN„ÇØ„Ç®„É™Ôºâ
    console.log('\nüîç Locations JOIN „ÉÜ„Çπ„Éà:')
    const { data: locations, error: locError } = await supabase
      .from('episode_locations')
      .select(`
        episode_id,
        locations (*)
      `)
      .in('episode_id', episodeIds)
      
    if (locError) {
      console.log('‚ùå Locations JOIN „Ç®„É©„Éº:', locError.message)
    } else {
      console.log(`‚úÖ Locations JOIN ÊàêÂäü: ${locations?.length || 0}‰ª∂`)
      locations?.forEach((item, idx) => {
        console.log(`  ${idx + 1}. ${item.locations?.name || 'N/A'} (Episode: ${item.episode_id})`)
      })
    }
    
    // ÂÆüÈöõ„ÅÆitemsÂèñÂæó„ÉÜ„Çπ„ÉàÔºàJOIN„ÇØ„Ç®„É™Ôºâ
    console.log('\nüîç Items JOIN „ÉÜ„Çπ„Éà:')
    const { data: items, error: itemError } = await supabase
      .from('episode_items')
      .select(`
        episode_id,
        items (*)
      `)
      .in('episode_id', episodeIds)
      
    if (itemError) {
      console.log('‚ùå Items JOIN „Ç®„É©„Éº:', itemError.message)
    } else {
      console.log(`‚úÖ Items JOIN ÊàêÂäü: ${items?.length || 0}‰ª∂`)
      items?.forEach((item, idx) => {
        console.log(`  ${idx + 1}. ${item.items?.name || 'N/A'} (Episode: ${item.episode_id})`)
      })
    }
    
    // getByCelebrityId „É°„ÇΩ„ÉÉ„Éâ„ÉÜ„Çπ„Éà
    console.log('\nüß™ getByCelebrityId „É°„ÇΩ„ÉÉ„Éâ„ÉÜ„Çπ„Éà:')
    
    // locations.getByCelebrityId
    try {
      const { data: locsByCeleb, error: locsByCelebError } = await supabase
        .from('episodes')
        .select('id')
        .eq('celebrity_id', celebrity.id)
        
      if (locsByCelebError) {
        console.log('‚ùå episodes for celebrity „Ç®„É©„Éº:', locsByCelebError.message)
      } else {
        const epIds = locsByCeleb?.map(ep => ep.id) || []
        const { data: locsData, error: locsDataError } = await supabase
          .from('episode_locations')
          .select(`locations (*)`)
          .in('episode_id', epIds)
          
        if (locsDataError) {
          console.log('‚ùå locations by celebrity „Ç®„É©„Éº:', locsDataError.message)
        } else {
          console.log(`‚úÖ Locations by celebrity: ${locsData?.length || 0}‰ª∂`)
        }
      }
    } catch (error: any) {
      console.log('‚ùå getByCelebrityId „ÉÜ„Çπ„Éà„Ç®„É©„Éº:', error.message)
    }
    
  } catch (error: any) {
    console.error('‚ùå ÂÖ®‰Ωì„Ç®„É©„Éº:', error.message)
  }
}

// ÂÆüË°å
if (import.meta.url === `file://${process.argv[1]}`) {
  debugLinks().catch(console.error)
}