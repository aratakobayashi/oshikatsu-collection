#!/usr/bin/env node

/**
 * „É≠„É≥„Ç∞„ÉÜ„Éº„É´Âº∑Âåñ„Éª„Çø„Éô„É≠„Ç∞ÊÉÖÂ†±ÊäΩÂá∫„ÅÆÂÆüË°åÂèØËÉΩÊÄßË™øÊüª
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'

dotenv.config({ path: '.env.production' })

const supabaseUrl = process.env.VITE_SUPABASE_URL!
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

async function analyzeLongtailOpportunities() {
  console.log('üîç „É≠„É≥„Ç∞„ÉÜ„Éº„É´„Éª„Çø„Éô„É≠„Ç∞ÊÉÖÂ†±ÊäΩÂá∫„ÅÆÂÆüË°åÂèØËÉΩÊÄßË™øÊüª')
  console.log('='.repeat(60))

  // „Çª„É¨„Éñ„É™„ÉÜ„Ç£Âà•„ÅÆ„É≠„Ç±„Éº„Ç∑„Éß„É≥Êï∞„ÇíË™øÊüª
  const { data: celebrities } = await supabase
    .from('celebrities')
    .select(`
      id, name, slug,
      episode_locations(
        location_id,
        locations(id, name, address, tabelog_url)
      )
    `)

  if (!celebrities) return

  console.log('üìä „Äê„É≠„É≥„Ç∞„ÉÜ„Éº„É´Ê©ü‰ºöÂàÜÊûê„Äë')
  console.log('='.repeat(40))

  const longtailOpportunities = celebrities
    .map(celeb => {
      const locations = celeb.episode_locations?.map(el => el.locations).filter(Boolean) || []
      const withTabelog = locations.filter(loc => loc.tabelog_url).length
      
      return {
        name: celeb.name,
        slug: celeb.slug,
        total_locations: locations.length,
        with_tabelog: withTabelog,
        tabelog_percentage: locations.length > 0 ? Math.round((withTabelog / locations.length) * 100) : 0,
        potential_pages: locations.length > 2 ? 2 : 0, // „É≠„Ç±Âú∞ + Ë°å„Åç„Å§„ÅëÂ∫ó
        seo_value: locations.length * (celeb.name.includes('Snow Man') || celeb.name.includes('SixTONES') ? 10 : 5)
      }
    })
    .filter(celeb => celeb.total_locations >= 3) // 3ÁÆáÊâÄ‰ª•‰∏ä„ÅÆ„Çª„É¨„Éñ„ÅÆ„Åø
    .sort((a, b) => b.seo_value - a.seo_value)

  console.log('üèÜ „ÄêTOP10„Äë„É≠„É≥„Ç∞„ÉÜ„Éº„É´„Éö„Éº„Ç∏‰ΩúÊàêÂÄôË£ú:')
  longtailOpportunities.slice(0, 10).forEach((celeb, i) => {
    console.log(`\n${i + 1}. ${celeb.name}`)
    console.log(`   üìç Èñ¢ÈÄ£„É≠„Ç±„Éº„Ç∑„Éß„É≥: ${celeb.total_locations}ÁÆáÊâÄ`)
    console.log(`   üçΩÔ∏è  „Çø„Éô„É≠„Ç∞ÂØæÂøú: ${celeb.with_tabelog}ÁÆáÊâÄ (${celeb.tabelog_percentage}%)`)
    console.log(`   üìÑ ‰ΩúÊàêÂèØËÉΩ„Éö„Éº„Ç∏: ${celeb.potential_pages}„Éö„Éº„Ç∏`)
    console.log(`   üí∞ SEO‰æ°ÂÄ§„Çπ„Ç≥„Ç¢: ${celeb.seo_value}`)
    console.log(`   üîó ‰∫àÊÉ≥URL: /celebrities/${celeb.slug}/locations, /celebrities/${celeb.slug}/restaurants`)
  })

  // „Çø„Éô„É≠„Ç∞ÊÉÖÂ†±ÊäΩÂá∫„ÅÆÁèæÂÆüÊÄßË™øÊüª
  console.log('\nüçΩÔ∏è „Äê„Çø„Éô„É≠„Ç∞ÊÉÖÂ†±ÊäΩÂá∫„ÅÆÁèæÂÆüÊÄßË™øÊüª„Äë')
  console.log('='.repeat(40))

  const { data: tabelogLocations } = await supabase
    .from('locations')
    .select('id, name, tabelog_url, phone, opening_hours')
    .not('tabelog_url', 'is', null)

  if (tabelogLocations) {
    const totalWithTabelog = tabelogLocations.length
    const missingPhone = tabelogLocations.filter(loc => !loc.phone).length
    const missingHours = tabelogLocations.filter(loc => !loc.opening_hours).length

    console.log(`üìä „Çø„Éô„É≠„Ç∞URLË®≠ÂÆöÊ∏à„Åø: ${totalWithTabelog}ÁÆáÊâÄ`)
    console.log(`üìû ÈõªË©±Áï™Âè∑‰∏çË∂≥: ${missingPhone}ÁÆáÊâÄ (${Math.round((missingPhone/totalWithTabelog)*100)}%)`)
    console.log(`üïê Âñ∂Ê•≠ÊôÇÈñì‰∏çË∂≥: ${missingHours}ÁÆáÊâÄ (${Math.round((missingHours/totalWithTabelog)*100)}%)`)

    // „Çµ„É≥„Éó„É´„ÅÆ„Çø„Éô„É≠„Ç∞URL„ÇíË™øÊüª
    console.log('\nüìã „Äê„Çµ„É≥„Éó„É´„Çø„Éô„É≠„Ç∞URL„ÄëÔºàÊÉÖÂ†±ÊäΩÂá∫ÂèØËÉΩÊÄßÁ¢∫Ë™çÁî®Ôºâ:')
    tabelogLocations.slice(0, 5).forEach((loc, i) => {
      console.log(`${i + 1}. ${loc.name}`)
      console.log(`   URL: ${loc.tabelog_url}`)
      console.log(`   ÁèæÂú®„ÅÆÊÉÖÂ†±: ÈõªË©±${loc.phone ? '„ÅÇ„Çä' : '„Å™„Åó'} / Âñ∂Ê•≠ÊôÇÈñì${loc.opening_hours ? '„ÅÇ„Çä' : '„Å™„Åó'}`)
    })

    console.log('\nü§ñ „ÄêÊÉÖÂ†±ÊäΩÂá∫„ÅÆÊäÄË°ìÁöÑ„Ç¢„Éó„É≠„Éº„ÉÅ„Äë')
    console.log('Option A: ÊâãÂãï„Ç≥„Éî„ÉöÔºàÊúÄ„ÇÇÁ¢∫ÂÆüÔºâ')
    console.log(`  - ‰ΩúÊ•≠Èáè: ${missingPhone}ÁÆáÊâÄ √ó 2ÂàÜ = ${Math.ceil(missingPhone * 2 / 60)}ÊôÇÈñì`)
    console.log(`  - ÊàêÂäüÁéá: 95%‰ª•‰∏ä`)
    console.log(`  - „É™„Çπ„ÇØ: „Å™„Åó`)

    console.log('\nOption B: „Çø„Éô„É≠„Ç∞API„ÅÆË™øÊüª')
    console.log(`  - ÂÖ¨ÂºèAPIÂ≠òÂú®Á¢∫Ë™ç„ÅåÂøÖË¶Å`)
    console.log(`  - „Éë„Éº„Éà„Éä„ÉºÂ•ëÁ¥Ñ„ÅÆÂèØËÉΩÊÄß`)
    console.log(`  - ÊàêÂäüÁéá: ‰∏çÊòéÔºàË¶ÅË™øÊüªÔºâ`)

    console.log('\nOption C: ÊßãÈÄ†Âåñ„Éá„Éº„Çø„ÅÆÊ¥ªÁî®')
    console.log(`  - „Çø„Éô„É≠„Ç∞„Éö„Éº„Ç∏ÂÜÖ„ÅÆÊßãÈÄ†Âåñ„Éá„Éº„Çø„ÇíË™øÊüª`)
    console.log(`  - schema.org„Éû„Éº„ÇØ„Ç¢„ÉÉ„Éó„ÅÆÊúâÁÑ°Á¢∫Ë™ç`)
    console.log(`  - ÊàêÂäüÁéá: Ë¶ÅË™øÊüª`)
  }

  // ÂÖ∑‰ΩìÁöÑ„Å™„É≠„É≥„Ç∞„ÉÜ„Éº„É´„Éö„Éº„Ç∏„ÅÆ„É¢„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
  console.log('\nüìÑ „ÄêÂÖ∑‰ΩìÁöÑ„Å™„Éö„Éº„Ç∏‰æã„Äë')
  console.log('='.repeat(40))
  
  const topCeleb = longtailOpportunities[0]
  if (topCeleb) {
    console.log(`\nüé¨ ${topCeleb.name}„ÅÆËÅñÂú∞Â∑°Á§º„Ç¨„Ç§„Éâ`)
    console.log(`URL: /celebrities/${topCeleb.slug}/locations`)
    console.log(``)
    console.log(`ÂÜÖÂÆπ‰æã:`)
    console.log(`- ${topCeleb.name}Èñ¢ÈÄ£„É≠„Ç±Âú∞ ${topCeleb.total_locations}ÁÆáÊâÄ„ÅÆÂú∞Âõ≥`)
    console.log(`- ÂêÑ„É≠„Ç±Âú∞„ÅÆË©≥Á¥∞Ôºà‰ΩèÊâÄ„Éª„Ç¢„ÇØ„Çª„Çπ„Éª„Ç®„Éî„ÇΩ„Éº„ÉâÔºâ`)
    console.log(`- „Åä„Åô„Åô„ÇÅËÅñÂú∞Â∑°Á§º„É´„Éº„Éà`)
    console.log(`- „Éï„Ç°„É≥„ÅÆÊäïÁ®øÂÜôÁúü„Éª„É¨„Éì„É•„Éº`)
    console.log(`- Èñ¢ÈÄ£„Ç∞„ÉÉ„Ç∫„Éª„Ç¢„Ç§„ÉÜ„É†ÊÉÖÂ†±`)
    console.log(``)
    console.log(`SEOÂäπÊûú:`)
    console.log(`- „Äå${topCeleb.name} „É≠„Ç±Âú∞„Äç„Åß„ÅÆ‰∏ä‰ΩçË°®Á§∫`)
    console.log(`- „Äå${topCeleb.name} ËÅñÂú∞Â∑°Á§º„Äç„Åß„ÅÆ„É≠„É≥„Ç∞„ÉÜ„Éº„É´Áç≤Âæó`)
    console.log(`- ÊúàÈñìÊ§úÁ¥¢Êï∞: Êé®ÂÆö1,000-5,000Âõû`)
  }

  console.log('\nüí° „ÄêÂÆüË£Ö„ÅÆÁèæÂÆüÊÄßË©ï‰æ°„Äë')
  console.log('='.repeat(40))
  console.log('‚úÖ „É≠„É≥„Ç∞„ÉÜ„Éº„É´„Éö„Éº„Ç∏‰ΩúÊàê: ÂÆüË£ÖÂÆπÊòìÔºàÊó¢Â≠ò„Éá„Éº„ÇøÊ¥ªÁî®Ôºâ')
  console.log('‚úÖ ÊâãÂãï„Åß„ÅÆ„Çø„Éô„É≠„Ç∞ÊÉÖÂ†±ËøΩÂä†: Á¢∫ÂÆü„Åß‰Ωé„É™„Çπ„ÇØ')
  console.log('‚ùì Ëá™ÂãïÊÉÖÂ†±ÊäΩÂá∫: ÊäÄË°ìË™øÊüª„ÅåÂøÖË¶Å')
  console.log('üéØ Êé®Â•®: ÊâãÂãï‰ΩúÊ•≠ + ÊÆµÈöéÁöÑËá™ÂãïÂåñ')

  return {
    longtail_opportunities: longtailOpportunities.slice(0, 10),
    tabelog_info_gap: { phone: missingPhone, hours: missingHours }
  }
}

// ÂÆüË°å
analyzeLongtailOpportunities()
  .then(results => {
    if (results) {
      console.log(`\n‚úÖ ÂàÜÊûêÂÆå‰∫Ü!`)
      console.log(`   „É≠„É≥„Ç∞„ÉÜ„Éº„É´Ê©ü‰ºö: ${results.longtail_opportunities.length}„Çª„É¨„Éñ„É™„ÉÜ„Ç£`)
      console.log(`   „Çø„Éô„É≠„Ç∞ÊÉÖÂ†±‰∏çË∂≥: ÈõªË©±${results.tabelog_info_gap.phone}‰ª∂„ÄÅÂñ∂Ê•≠ÊôÇÈñì${results.tabelog_info_gap.hours}‰ª∂`)
    }
  })
  .catch(error => {
    console.error('‚ùå „Ç®„É©„Éº:', error)
  })