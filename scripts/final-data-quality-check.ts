#!/usr/bin/env node

/**
 * ÊúÄÁµÇ„Éá„Éº„ÇøÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
 * ÊÆãÂ≠ò„Éá„Éº„Çø„ÅÆÂìÅË≥™Á¢∫Ë™ç„Å®„Åï„Çâ„Å™„Çã„ÇØ„É™„Éº„Éã„É≥„Ç∞ÂøÖË¶ÅÊÄß„ÅÆÂà§ÂÆö
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'

dotenv.config({ path: '.env.production' })

const supabaseUrl = process.env.VITE_SUPABASE_URL!
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

async function finalDataQualityCheck() {
  console.log('üîç ÊúÄÁµÇ„Éá„Éº„ÇøÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ')
  console.log('='.repeat(60))

  // ÁèæÂú®„ÅÆÊÆãÂ≠ò„Éá„Éº„Çø„ÇíÂèñÂæó
  const { data: locations, error } = await supabase
    .from('locations')
    .select(`
      id, name, address, description, tags,
      tabelog_url, website_url, phone, opening_hours,
      episode_locations(
        episodes(id, title, celebrities(name))
      )
    `)
    .order('name')

  if (error) {
    throw new Error(`„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: ${error.message}`)
  }

  console.log(`üìä ÁèæÂú®„ÅÆÊÆãÂ≠ò„É≠„Ç±„Éº„Ç∑„Éß„É≥Êï∞: ${locations.length}‰ª∂`)

  // 1. Âü∫Êú¨Áµ±Ë®à
  const stats = {
    total: locations.length,
    withTabelog: locations.filter(loc => loc.tabelog_url).length,
    withPhone: locations.filter(loc => loc.phone).length,
    withHours: locations.filter(loc => loc.opening_hours).length,
    withAddress: locations.filter(loc => loc.address && loc.address.length > 5).length,
    withEpisodes: locations.filter(loc => loc.episode_locations && loc.episode_locations.length > 0).length
  }

  console.log('\nüìà „ÄêÁèæÂú®„ÅÆ„Éá„Éº„ÇøÂìÅË≥™Áµ±Ë®à„Äë')
  console.log('='.repeat(40))
  console.log(`Á∑è„É≠„Ç±„Éº„Ç∑„Éß„É≥Êï∞: ${stats.total}‰ª∂`)
  console.log(`„Çø„Éô„É≠„Ç∞URL: ${stats.withTabelog}‰ª∂ (${Math.round(stats.withTabelog/stats.total*100)}%)`)
  console.log(`ÈõªË©±Áï™Âè∑: ${stats.withPhone}‰ª∂ (${Math.round(stats.withPhone/stats.total*100)}%)`)
  console.log(`Âñ∂Ê•≠ÊôÇÈñì: ${stats.withHours}‰ª∂ (${Math.round(stats.withHours/stats.total*100)}%)`)
  console.log(`‰ΩèÊâÄÊÉÖÂ†±: ${stats.withAddress}‰ª∂ (${Math.round(stats.withAddress/stats.total*100)}%)`)
  console.log(`„Ç®„Éî„ÇΩ„Éº„ÉâÁ¥ê‰ªò„Åë: ${stats.withEpisodes}‰ª∂ (${Math.round(stats.withEpisodes/stats.total*100)}%)`)

  // 2. Áñë„Çè„Åó„ÅÑ„Éá„Éº„Çø„ÅÆÁâπÂÆö
  const suspiciousLocations = locations.filter(loc => {
    const name = loc.name?.toLowerCase() || ''
    const address = loc.address?.toLowerCase() || ''
    
    // Áñë„Çè„Åó„ÅÑ„Éë„Çø„Éº„É≥
    const suspiciousPatterns = [
      // Êòé„Çâ„Åã„Å´Â∫óËàó„Åß„ÅØ„Å™„ÅÑ„ÇÇ„ÅÆ
      /ÈßÖ|„Éõ„Éº„É†|ÂÖ¨Âúí|Á•ûÁ§æ|ÂØ∫|Êïô‰ºö|Â≠¶Ê†°|ÁóÖÈô¢|ÂΩπÊâÄ|Âõ≥Êõ∏È§®|ÁæéË°ìÈ§®|ÂçöÁâ©È§®/,
      // ÊñΩË®≠Á≥ª
      /„Éì„É´$|„Éû„É≥„Ç∑„Éß„É≥|„Ç¢„Éë„Éº„Éà|‰ΩèÂÆÖ|„Çπ„Çø„Ç∏„Ç™|‰ºöÂ†¥|„Éõ„Éº„É´/,
      // „ÅÇ„ÅÑ„Åæ„ÅÑ„Å™„ÇÇ„ÅÆ
      /^Â†¥ÊâÄ|^„Çπ„Éù„ÉÉ„Éà|^„É≠„Ç±Âú∞|^‰∏çÊòé|^Êú™Ë®≠ÂÆö|^„ÉÜ„Çπ„Éà|test$/i,
      // Èï∑„Åô„Åé„ÇãÂêçÂâçÔºàË™¨ÊòéÊñá„Å£„ÅΩ„ÅÑÔºâ
      /[„ÄÇÔºÅÔºü]/,
      // ÊôÇÈñìË°®Ë®òÔºàÊ•ΩÊõ≤Âêç„ÅÆÂèØËÉΩÊÄßÔºâ
      /^\d{1,2}:\d{2}/
    ]
    
    return suspiciousPatterns.some(pattern => 
      pattern.test(name) || pattern.test(address)
    )
  })

  console.log('\n‚ö†Ô∏è  „ÄêË¶ÅÁ¢∫Ë™ç„Éá„Éº„Çø„Äë')
  console.log('='.repeat(40))
  console.log(`Áñë„Çè„Åó„ÅÑ„Éá„Éº„Çø: ${suspiciousLocations.length}‰ª∂`)

  if (suspiciousLocations.length > 0) {
    console.log('\nÁñë„Çè„Åó„ÅÑ„Éá„Éº„Çø‰∏ÄË¶ß:')
    suspiciousLocations.slice(0, 15).forEach((loc, i) => {
      console.log(`${i+1}. ${loc.name}`)
      console.log(`   üìç ${loc.address || '‰ΩèÊâÄ‰∏çÊòé'}`)
      console.log(`   üé¨ ${loc.episode_locations?.length || 0}„Ç®„Éî„ÇΩ„Éº„Éâ`)
      console.log('')
    })
    
    if (suspiciousLocations.length > 15) {
      console.log(`   ... ‰ªñ${suspiciousLocations.length - 15}‰ª∂`)
    }
  }

  // 3. ÈáçË§á„Éá„Éº„Çø„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
  const nameGroups = locations.reduce((acc, loc) => {
    const name = loc.name?.trim()
    if (name) {
      if (!acc[name]) acc[name] = []
      acc[name].push(loc)
    }
    return acc
  }, {} as Record<string, any[]>)

  const duplicates = Object.entries(nameGroups)
    .filter(([name, locs]) => locs.length > 1)
    .map(([name, locs]) => ({ name, count: locs.length, items: locs }))

  console.log('\nüîÑ „ÄêÈáçË§á„Éá„Éº„Çø„ÉÅ„Çß„ÉÉ„ÇØ„Äë')
  console.log('='.repeat(40))
  console.log(`ÈáçË§á„Åô„ÇãÂêçÂâç: ${duplicates.length}Á®ÆÈ°û`)

  if (duplicates.length > 0) {
    console.log('\nÈáçË§á„Éá„Éº„Çø‰∏ÄË¶ß:')
    duplicates.slice(0, 10).forEach((dup, i) => {
      console.log(`${i+1}. "${dup.name}" - ${dup.count}‰ª∂`)
      dup.items.forEach((item, j) => {
        console.log(`   ${j+1}) ${item.address || '‰ΩèÊâÄ‰∏çÊòé'} (ID: ${item.id.slice(0, 8)})`)
      })
      console.log('')
    })
  }

  // 4. È´òÂìÅË≥™„Éá„Éº„Çø„ÅÆÊäΩÂá∫
  const highQualityLocations = locations.filter(loc => {
    const name = loc.name?.toLowerCase() || ''
    
    // È´òÂìÅË≥™„ÅÆÊù°‰ª∂
    const qualityKeywords = [
      '„É¨„Çπ„Éà„É©„É≥', '„Ç´„Éï„Çß', 'Âñ´Ëå∂', '„Éê„Éº', 'Â±ÖÈÖíÂ±ã', '„É©„Éº„É°„É≥', 
      '„ÅÜ„Å©„Çì', '„Åù„Å∞', 'ÂØøÂè∏', 'ÁÑºËÇâ', 'ÁÑºÈ≥•', '„Éî„Ç∂', '„Éè„É≥„Éê„Éº„Ç¨„Éº',
      'ÂÆöÈ£ü', 'ÂºÅÂΩì', '‰∏≠ËèØ', '„Ç§„Çø„É™„Ç¢„É≥', '„Éï„É¨„É≥„ÉÅ', 'ÂíåÈ£ü', 'Ê¥ãÈ£ü'
    ]
    
    const hasQualityKeyword = qualityKeywords.some(keyword => 
      name.includes(keyword) || loc.description?.toLowerCase().includes(keyword)
    )
    
    const hasGoodData = loc.address && loc.address.length > 10 && 
                       !loc.address.includes('Êù±‰∫¨ÈÉΩÂÜÖ') && 
                       !loc.address.includes('ÂêÑÂ∫óËàó')
    
    return hasQualityKeyword || loc.tabelog_url || hasGoodData
  })

  console.log('\n‚úÖ „ÄêÈ´òÂìÅË≥™„Éá„Éº„Çø„Äë')
  console.log('='.repeat(40))
  console.log(`È´òÂìÅË≥™Â∫óËàó„Éá„Éº„Çø: ${highQualityLocations.length}‰ª∂`)
  console.log(`ÂìÅË≥™Áéá: ${Math.round(highQualityLocations.length/stats.total*100)}%`)

  // 5. „Çø„Éô„É≠„Ç∞URLÂØæÂøú„ÅÆÂÑ™ÂÖàÂ∫¶„É™„Çπ„Éà
  const tabelogCandidates = highQualityLocations
    .filter(loc => !loc.tabelog_url)
    .map(loc => ({
      id: loc.id,
      name: loc.name,
      address: loc.address,
      episode_count: loc.episode_locations?.length || 0,
      celebrities: [...new Set(loc.episode_locations?.map(el => 
        el.episodes?.celebrities?.name).filter(Boolean) || [])],
      priority_score: (loc.episode_locations?.length || 0) * 10 + 
                     (loc.phone ? 5 : 0) + 
                     (loc.address && loc.address.length > 10 ? 3 : 0)
    }))
    .sort((a, b) => b.priority_score - a.priority_score)

  console.log('\nüéØ „Äê„Çø„Éô„É≠„Ç∞URLÂØæÂøúÂÑ™ÂÖà„É™„Çπ„Éà TOP10„Äë')
  console.log('='.repeat(50))
  tabelogCandidates.slice(0, 10).forEach((loc, i) => {
    console.log(`${i+1}. ${loc.name}`)
    console.log(`   üìç ${loc.address || '‰ΩèÊâÄ‰∏çÊòé'}`)
    console.log(`   üé¨ ${loc.episode_count}„Ç®„Éî„ÇΩ„Éº„Éâ`)
    console.log(`   ‚≠ê ${loc.celebrities.slice(0, 2).join(', ')}`)
    console.log(`   üí∞ ÂÑ™ÂÖàÂ∫¶: ${loc.priority_score}`)
    console.log('')
  })

  // 6. ÊúÄÁµÇÊé®Â•®‰∫ãÈ†Ö
  console.log('\nüí° „ÄêÊúÄÁµÇÊé®Â•®‰∫ãÈ†Ö„Äë')
  console.log('='.repeat(40))
  
  if (suspiciousLocations.length > 10) {
    console.log(`‚ö†Ô∏è  ËøΩÂä†„ÇØ„É™„Éº„Éã„É≥„Ç∞Êé®Â•®: ${suspiciousLocations.length}‰ª∂„ÅÆÁñë„Çè„Åó„ÅÑ„Éá„Éº„Çø„ÅÇ„Çä`)
  } else {
    console.log('‚úÖ „Éá„Éº„ÇøÂìÅË≥™ËâØÂ•Ω: Â§ßË¶èÊ®°„Å™„ÇØ„É™„Éº„Éã„É≥„Ç∞„ÅØ‰∏çË¶Å')
  }
  
  if (duplicates.length > 0) {
    console.log(`üîÑ ÈáçË§á„Éá„Éº„Çø„ÅÆÊï¥ÁêÜÊé®Â•®: ${duplicates.length}Á®ÆÈ°û`)
  }
  
  console.log(`üéØ „Çø„Éô„É≠„Ç∞URLÂØæÂøúÂÄôË£ú: ${tabelogCandidates.length}‰ª∂`)
  console.log(`üìà SEOÂº∑ÂåñÊ∫ñÂÇôÂÆå‰∫Ü: È´òÂìÅË≥™„Éá„Éº„Çø${highQualityLocations.length}‰ª∂„ÅßÈñãÂßãÂèØËÉΩ`)

  return {
    total_locations: stats.total,
    suspicious_count: suspiciousLocations.length,
    duplicate_count: duplicates.length,
    high_quality_count: highQualityLocations.length,
    tabelog_candidates: tabelogCandidates.length,
    quality_percentage: Math.round(highQualityLocations.length/stats.total*100),
    suspicious_data: suspiciousLocations,
    tabelog_priority_list: tabelogCandidates.slice(0, 20)
  }
}

// ÂÆüË°å
finalDataQualityCheck()
  .then(result => {
    console.log(`\n‚úÖ ÊúÄÁµÇÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü!`)
    console.log(`   Á∑è„Éá„Éº„ÇøÊï∞: ${result.total_locations}‰ª∂`)
    console.log(`   È´òÂìÅË≥™„Éá„Éº„Çø: ${result.high_quality_count}‰ª∂ (${result.quality_percentage}%)`)
    console.log(`   Áñë„Çè„Åó„ÅÑ„Éá„Éº„Çø: ${result.suspicious_count}‰ª∂`)
    console.log(`   ÈáçË§á„Éá„Éº„Çø: ${result.duplicate_count}Á®ÆÈ°û`)
    console.log(`   „Çø„Éô„É≠„Ç∞ÂÄôË£ú: ${result.tabelog_candidates}‰ª∂`)
  })
  .catch(error => {
    console.error('‚ùå „Ç®„É©„Éº:', error)
  })
