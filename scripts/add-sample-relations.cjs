const SUPABASE_URL = 'https://ounloyykptsqzdpbsnpn.supabase.co'
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91bmxveXlrcHRzcXpkcGJzbnBuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ3MjIzODMsImV4cCI6MjA3MDI5ODM4M30.VpSq034vLWHH3n_W-ikJyho6BuwY6UahN52V9US5n0U'

const crypto = require('crypto')

function generateId() {
  return crypto.randomUUID()
}

async function addSampleRelations() {
  console.log('üéØ „Çµ„É≥„Éó„É´Èñ¢ÈÄ£„Éá„Éº„Çø„ÇíËøΩÂä†...\n')

  try {
    // 1. Êó¢Â≠ò„Éá„Éº„Çø„ÇíÂèñÂæó
    console.log('üìã Êó¢Â≠ò„Éá„Éº„Çø„ÇíÁ¢∫Ë™ç‰∏≠...')
    
    // ‰∫∫Ê∞ó„Ç®„Éî„ÇΩ„Éº„Éâ5„Å§„ÇíÂèñÂæó
    const episodesRes = await fetch(
      `${SUPABASE_URL}/rest/v1/episodes?select=id,title&order=view_count.desc&limit=5`,
      {
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
        }
      }
    )
    const episodes = await episodesRes.json()
    
    // „Ç¢„Ç§„ÉÜ„É†„ÇíÂèñÂæó
    const itemsRes = await fetch(
      `${SUPABASE_URL}/rest/v1/items?select=id,name`,
      {
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
        }
      }
    )
    const items = await itemsRes.json()
    
    // „É≠„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂèñÂæó
    const locationsRes = await fetch(
      `${SUPABASE_URL}/rest/v1/locations?select=id,name`,
      {
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
        }
      }
    )
    const locations = await locationsRes.json()

    console.log(`‚úÖ „Ç®„Éî„ÇΩ„Éº„Éâ: ${episodes.length}‰ª∂`)
    console.log(`‚úÖ „Ç¢„Ç§„ÉÜ„É†: ${items.length}‰ª∂`)
    console.log(`‚úÖ „É≠„Ç±„Éº„Ç∑„Éß„É≥: ${locations.length}‰ª∂\n`)

    if (episodes.length === 0 || items.length === 0 || locations.length === 0) {
      console.log('‚ùå ÂçÅÂàÜ„Å™„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÂÖà„Å´„Éû„Çπ„Çø„Éº„Éá„Éº„Çø„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      return
    }

    // 2. „Ç®„Éî„ÇΩ„Éº„Éâ-„Ç¢„Ç§„ÉÜ„É†„ÅÆÈñ¢ÈÄ£„ÇíËøΩÂä†
    console.log('üëó „Ç®„Éî„ÇΩ„Éº„Éâ-„Ç¢„Ç§„ÉÜ„É†Èñ¢ÈÄ£„ÇíËøΩÂä†‰∏≠...')
    
    const episodeItems = [
      {
        id: generateId(),
        episode_id: episodes[0]?.id, // ÊúÄ„ÇÇ‰∫∫Ê∞ó„ÅÆ„Ç®„Éî„ÇΩ„Éº„Éâ
        item_id: items[0]?.id, // ÊúÄÂàù„ÅÆ„Ç¢„Ç§„ÉÜ„É†
        timestamp_seconds: 30,
        scene_description: '„Ç™„Éº„Éó„Éã„É≥„Ç∞„Ç∑„Éº„É≥„ÅßÁùÄÁî®',
        is_featured: true,
        confidence_level: 'confirmed'
      },
      {
        id: generateId(),
        episode_id: episodes[0]?.id,
        item_id: items[1]?.id, // 2Áï™ÁõÆ„ÅÆ„Ç¢„Ç§„ÉÜ„É†ÔºàÂ≠òÂú®„Åô„ÇãÂ†¥ÂêàÔºâ
        timestamp_seconds: 180,
        scene_description: '„É°„Ç§„É≥„Ç∑„Éº„É≥„Åß‰ΩøÁî®',
        is_featured: false,
        confidence_level: 'likely'
      }
    ]

    // items[1]„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„Åø2Áï™ÁõÆ„ÅÆÈñ¢ÈÄ£„ÇíËøΩÂä†
    const validEpisodeItems = episodeItems.filter(item => item.item_id)

    for (const relation of validEpisodeItems) {
      const response = await fetch(`${SUPABASE_URL}/rest/v1/episode_items`, {
        method: 'POST',
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json',
          'Prefer': 'return=minimal'
        },
        body: JSON.stringify(relation)
      })

      if (response.ok) {
        console.log(`   ‚úÖ Èñ¢ÈÄ£ËøΩÂä†: ${episodes[0]?.title.substring(0, 30)}... ‚Üê ${items.find(i => i.id === relation.item_id)?.name}`)
      } else {
        const error = await response.text()
        console.log(`   ‚ö†Ô∏è  Èñ¢ÈÄ£ËøΩÂä†Â§±Êïó: ${error}`)
      }
    }

    // 3. „Ç®„Éî„ÇΩ„Éº„Éâ-„É≠„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÈñ¢ÈÄ£„ÇíËøΩÂä†
    console.log('\nüìç „Ç®„Éî„ÇΩ„Éº„Éâ-„É≠„Ç±„Éº„Ç∑„Éß„É≥Èñ¢ÈÄ£„ÇíËøΩÂä†‰∏≠...')
    
    const episodeLocations = [
      {
        id: generateId(),
        episode_id: episodes[0]?.id, // ÊúÄ„ÇÇ‰∫∫Ê∞ó„ÅÆ„Ç®„Éî„ÇΩ„Éº„Éâ
        location_id: locations[0]?.id, // ÊúÄÂàù„ÅÆ„É≠„Ç±„Éº„Ç∑„Éß„É≥
        scene_description: 'ÊúùÈ£ü„Ç∑„Éº„É≥„ÅßË®™Âïè',
        is_main_location: true
      },
      {
        id: generateId(),
        episode_id: episodes[1]?.id || episodes[0]?.id, // 2Áï™ÁõÆ„ÅÆ„Ç®„Éî„ÇΩ„Éº„Éâ
        location_id: locations[1]?.id || locations[0]?.id, // 2Áï™ÁõÆ„ÅÆ„É≠„Ç±„Éº„Ç∑„Éß„É≥
        scene_description: '„Éâ„É©„Ç§„ÉñÂÖà„Å®„Åó„Å¶Ë®™Âïè',
        is_main_location: false
      }
    ]

    for (const relation of episodeLocations) {
      if (!relation.episode_id || !relation.location_id) continue

      const response = await fetch(`${SUPABASE_URL}/rest/v1/episode_locations`, {
        method: 'POST',
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
          'Content-Type': 'application/json',
          'Prefer': 'return=minimal'
        },
        body: JSON.stringify(relation)
      })

      if (response.ok) {
        const episode = episodes.find(e => e.id === relation.episode_id)
        const location = locations.find(l => l.id === relation.location_id)
        console.log(`   ‚úÖ Èñ¢ÈÄ£ËøΩÂä†: ${episode?.title.substring(0, 30)}... ‚Üê ${location?.name}`)
      } else {
        const error = await response.text()
        console.log(`   ‚ö†Ô∏è  Èñ¢ÈÄ£ËøΩÂä†Â§±Êïó: ${error}`)
      }
    }

    // 4. ÁµêÊûúÁ¢∫Ë™ç
    console.log('\nüìä ËøΩÂä†ÁµêÊûú„ÇíÁ¢∫Ë™ç‰∏≠...')
    
    const itemRelationsRes = await fetch(
      `${SUPABASE_URL}/rest/v1/episode_items?select=*`,
      {
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
        }
      }
    )
    const itemRelations = await itemRelationsRes.json()

    const locationRelationsRes = await fetch(
      `${SUPABASE_URL}/rest/v1/episode_locations?select=*`,
      {
        headers: {
          'apikey': SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
        }
      }
    )
    const locationRelations = await locationRelationsRes.json()

    console.log(`‚úÖ episode_items: ${itemRelations.length}‰ª∂`)
    console.log(`‚úÖ episode_locations: ${locationRelations.length}‰ª∂`)

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message)
  }
}

// ÂÆüË°å
addSampleRelations()
  .then(() => {
    console.log('\nüéâ „Çµ„É≥„Éó„É´Èñ¢ÈÄ£„Éá„Éº„Çø„ÅÆËøΩÂä†ÂÆå‰∫ÜÔºÅ')
    console.log('\nüìã Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:')
    console.log('1. „Ç®„Éî„ÇΩ„Éº„ÉâË©≥Á¥∞„Éö„Éº„Ç∏„ÅßÈñ¢ÈÄ£„Ç¢„Ç§„ÉÜ„É†„Éª„É≠„Ç±„Éº„Ç∑„Éß„É≥„ÅåË°®Á§∫„Åï„Çå„Çã„ÅãÁ¢∫Ë™ç')
    console.log('2. ‰∫∫Ê∞ó„Ç®„Éî„ÇΩ„Éº„Éâ„ÅÆ„Éö„Éº„Ç∏„Çí„ÉÅ„Çß„ÉÉ„ÇØ')
    console.log('3. https://develop--oshikatsu-collection.netlify.app/episodes/[ID]')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå „Ç®„É©„Éº:', error)
    process.exit(1)
  })