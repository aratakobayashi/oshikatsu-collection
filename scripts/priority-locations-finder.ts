#!/usr/bin/env npx tsx

/**
 * ÂÑ™ÂÖàÂ∫¶„ÅÆÈ´ò„ÅÑ„É≠„Ç±„Éº„Ç∑„Éß„É≥ÔºàÂèéÁõäÊÄß„ÅÆÈ´ò„Åù„ÅÜ„Å™Â∫óËàóÔºâ„ÇíÁâπÂÆö„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'
import { resolve } from 'path'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

dotenv.config({ path: resolve(__dirname, '../.env.production') })

const supabase = createClient(
  process.env.VITE_SUPABASE_URL!,
  process.env.VITE_SUPABASE_ANON_KEY!
)

async function findPriorityLocations() {
  try {
    console.log('üéØ È´òÂèéÁõä„ÅåÊúüÂæÖ„Åß„Åç„ÇãÂ∫óËàó„ÇíÁâπÂÆö‰∏≠...')
    
    // È£≤È£üÂ∫ó„Ç≠„Éº„ÉØ„Éº„Éâ
    const restaurantKeywords = [
      '„É¨„Çπ„Éà„É©„É≥', '„Ç´„Éï„Çß', 'ÊñôÁêÜ', '„É©„Éº„É°„É≥', 'ÂØøÂè∏', 'ÁÑºËÇâ', 
      '„Éô„Éº„Ç´„É™„Éº', '„Éë„É≥', '„ÉÄ„Ç§„Éã„É≥„Ç∞', '„Éì„Çπ„Éà„É≠', '„Éê„Éº'
    ]
    
    // „Ç®„Éî„ÇΩ„Éº„Éâ„Å®Èñ¢ÈÄ£„Éá„Éº„Çø„ÇíÂèñÂæó
    const { data: locationsWithEpisodes, error } = await supabase
      .from('locations')
      .select(`
        id,
        name,
        address,
        website_url,
        tags,
        description,
        episode_id,
        episodes:episode_id (
          id,
          title,
          view_count,
          date,
          celebrities:celebrity_id (
            name,
            subscriber_count
          )
        )
      `)
      .not('episode_id', 'is', null)
      .order('name')
    
    if (error || !locationsWithEpisodes) {
      console.error('‚ùå „Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº:', error)
      return
    }
    
    console.log(`üìä ${locationsWithEpisodes.length}‰ª∂„ÅÆ„Ç®„Éî„ÇΩ„Éº„ÉâÈñ¢ÈÄ£„É≠„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂàÜÊûê‰∏≠...`)
    
    // È£≤È£üÂ∫ó„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åó„Å¶ÂÑ™ÂÖàÂ∫¶„Çí„Çπ„Ç≥„Ç¢Âåñ
    const priorityLocations = locationsWithEpisodes
      .filter(location => {
        const searchText = [
          location.name || '',
          location.description || '',
          (location.tags || []).join(' ')
        ].join(' ').toLowerCase()
        
        return restaurantKeywords.some(keyword => 
          searchText.includes(keyword.toLowerCase())
        )
      })
      .map(location => {
        let score = 0
        let scoreDetails: string[] = []
        
        // „Ç®„Éî„ÇΩ„Éº„Éâ„ÅÆÂÜçÁîüÂõûÊï∞„Å´„Çà„Çã„Çπ„Ç≥„Ç¢
        const episode = location.episodes as any
        if (episode?.view_count) {
          if (episode.view_count > 100000) {
            score += 50
            scoreDetails.push('È´òÂÜçÁîüÂõûÊï∞(10‰∏á+)')
          } else if (episode.view_count > 50000) {
            score += 30
            scoreDetails.push('‰∏≠ÂÜçÁîüÂõûÊï∞(5‰∏á+)')
          } else if (episode.view_count > 10000) {
            score += 15
            scoreDetails.push('‰ΩéÂÜçÁîüÂõûÊï∞(1‰∏á+)')
          }
        }
        
        // „Çø„É¨„É≥„Éà„ÅÆ„ÉÅ„É£„É≥„Éç„É´ÁôªÈå≤ËÄÖÊï∞„Å´„Çà„Çã„Çπ„Ç≥„Ç¢
        if (episode?.celebrities?.subscriber_count) {
          if (episode.celebrities.subscriber_count > 1000000) {
            score += 30
            scoreDetails.push('Â§ßÁâ©„Çø„É¨„É≥„Éà(100‰∏á+)')
          } else if (episode.celebrities.subscriber_count > 500000) {
            score += 20
            scoreDetails.push('‰∫∫Ê∞ó„Çø„É¨„É≥„Éà(50‰∏á+)')
          }
        }
        
        // „Ç®„Éî„ÇΩ„Éº„Éâ„ÅÆÊñ∞„Åó„Åï„Å´„Çà„Çã„Çπ„Ç≥„Ç¢
        if (episode?.date) {
          const episodeDate = new Date(episode.date)
          const now = new Date()
          const daysDiff = (now.getTime() - episodeDate.getTime()) / (1000 * 60 * 60 * 24)
          
          if (daysDiff < 90) {
            score += 20
            scoreDetails.push('ÊúÄËøë„ÅÆ„Ç®„Éî„ÇΩ„Éº„Éâ(3„É∂Êúà‰ª•ÂÜÖ)')
          } else if (daysDiff < 365) {
            score += 10
            scoreDetails.push('ÊØîËºÉÁöÑÊñ∞„Åó„ÅÑ(1Âπ¥‰ª•ÂÜÖ)')
          }
        }
        
        // ‰∫∫Ê∞óÂ∫óËàó„Çø„Ç§„Éó„Å´„Çà„Çã„Çπ„Ç≥„Ç¢
        const name = location.name.toLowerCase()
        if (name.includes('„Ç´„Éï„Çß') || name.includes('cafe')) {
          score += 15
          scoreDetails.push('„Ç´„Éï„ÇßÁ≥ª(‰∫∫Ê∞ó„Ç∏„É£„É≥„É´)')
        }
        if (name.includes('„Éô„Éº„Ç´„É™„Éº') || name.includes('„Éë„É≥')) {
          score += 15
          scoreDetails.push('„Éô„Éº„Ç´„É™„ÉºÁ≥ª(‰∫∫Ê∞ó„Ç∏„É£„É≥„É´)')
        }
        if (name.includes('„É©„Éº„É°„É≥')) {
          score += 10
          scoreDetails.push('„É©„Éº„É°„É≥Á≥ª')
        }
        
        // Êó¢„Å´È£ü„Åπ„É≠„Ç∞URL„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÊ∏õÁÇπÔºàÂÑ™ÂÖàÂ∫¶‰∏ã„Åí„ÇãÔºâ
        if (location.website_url?.includes('tabelog.com')) {
          score -= 100 // ÂæåÂõû„Åó„Å´„Åô„Çã
          scoreDetails.push('Êó¢„Å´È£ü„Åπ„É≠„Ç∞URLË®≠ÂÆöÊ∏à„Åø')
        }
        
        return {
          ...location,
          priority_score: score,
          score_details: scoreDetails,
          episode_info: episode
        }
      })
      .sort((a, b) => b.priority_score - a.priority_score)
    
    console.log('\nüèÜ TOP20 ÂÑ™ÂÖàË®≠ÂÆöÂØæË±°Â∫óËàó:')
    console.log('=' .repeat(80))
    
    const top20 = priorityLocations.slice(0, 20)
    
    top20.forEach((location, index) => {
      console.log(`\n${index + 1}. ${location.name} („Çπ„Ç≥„Ç¢: ${location.priority_score})`)
      console.log(`   ID: ${location.id}`)
      if (location.address) console.log(`   ‰ΩèÊâÄ: ${location.address}`)
      if (location.website_url) console.log(`   ÁèæÂú®„ÅÆURL: ${location.website_url}`)
      if (location.episode_info) {
        console.log(`   „Ç®„Éî„ÇΩ„Éº„Éâ: ${location.episode_info.title}`)
        if (location.episode_info.view_count) {
          console.log(`   ÂÜçÁîüÂõûÊï∞: ${location.episode_info.view_count.toLocaleString()}Âõû`)
        }
        if (location.episode_info.celebrities) {
          console.log(`   „Çø„É¨„É≥„Éà: ${location.episode_info.celebrities.name}`)
        }
      }
      console.log(`   ÁêÜÁî±: ${location.score_details.join(', ')}`)
    })
    
    // CSVÂá∫Âäõ
    const csvData = [
      '„É©„É≥„ÇØ,ID,Â∫óËàóÂêç,‰ΩèÊâÄ,„Çπ„Ç≥„Ç¢,„Ç®„Éî„ÇΩ„Éº„Éâ„Çø„Ç§„Éà„É´,ÂÜçÁîüÂõûÊï∞,„Çø„É¨„É≥„Éà,ÁèæÂú®„ÅÆURL,ÁêÜÁî±',
      ...top20.map((loc, index) => [
        index + 1,
        `"${loc.id}"`,
        `"${loc.name}"`,
        `"${loc.address || ''}"`,
        loc.priority_score,
        `"${loc.episode_info?.title || ''}"`,
        loc.episode_info?.view_count || 0,
        `"${loc.episode_info?.celebrities?.name || ''}"`,
        `"${loc.website_url || ''}"`,
        `"${loc.score_details.join(', ')}"`
      ].join(','))
    ].join('\n')
    
    const fs = await import('fs')
    const outputPath = resolve(__dirname, '../priority-locations-top20.csv')
    fs.writeFileSync(outputPath, csvData, 'utf-8')
    
    console.log(`\n‚úÖ TOP20„ÇíCSV„Å´Âá∫Âäõ: ${outputPath}`)
    console.log('\nüöÄ Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥„Éó„É©„É≥:')
    console.log('1. „Åæ„ÅöTOP5„ÅÆÂ∫óËàó„ÅÆÈ£ü„Åπ„É≠„Ç∞URL„ÇíÊâãÂãï„ÅßË™øÊüª')
    console.log('2. „Ç¢„Éï„Ç£„É™„Ç®„Ç§„Éà„É™„É≥„ÇØ„ÇíË®≠ÂÆö')
    console.log('3. 1ÈÄ±ÈñìÊßòÂ≠ê„ÇíË¶ã„Å¶„ÇØ„É™„ÉÉ„ÇØÊï∞„ÇíÁ¢∫Ë™ç')
    console.log('4. ÂäπÊûú„Åå„ÅÇ„Çå„Å∞TOP20„Åæ„ÅßÊã°Â§ß')
    
    // Áµ±Ë®àÊÉÖÂ†±
    console.log('\nüìä Áµ±Ë®àÊÉÖÂ†±:')
    console.log(`Á∑èÈ£≤È£üÂ∫óÂÄôË£ú: ${priorityLocations.length}‰ª∂`)
    console.log(`È´ò„Çπ„Ç≥„Ç¢Â∫óËàó(50+): ${priorityLocations.filter(l => l.priority_score >= 50).length}‰ª∂`)
    console.log(`‰∏≠„Çπ„Ç≥„Ç¢Â∫óËàó(20-49): ${priorityLocations.filter(l => l.priority_score >= 20 && l.priority_score < 50).length}‰ª∂`)
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error)
  }
}

findPriorityLocations()