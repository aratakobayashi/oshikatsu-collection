#!/usr/bin/env npx tsx

/**
 * ÈáçË§á„É≠„Ç±„Éº„Ç∑„Éß„É≥Áµ±Âêà„Çπ„ÇØ„É™„Éó„Éà
 * „Ç®„Éî„ÇΩ„Éº„ÉâÁ¥ê‰ªò„Åç„É¨„Ç≥„Éº„Éâ„Å´TabelogURL„ÇíÁßªË°å
 */

import { createClient } from '@supabase/supabase-js'
import * as dotenv from 'dotenv'
import { resolve } from 'path'
import { fileURLToPath } from 'url'
import { dirname } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

dotenv.config({ path: resolve(__dirname, '../../.env.production') })

const supabaseUrl = process.env.VITE_SUPABASE_URL!
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY!
const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Áµ±ÂêàÂØæË±°„ÅÆÊòéÁ¢∫„Å™„Éû„ÉÉ„Éî„É≥„Ç∞
const mergeTargets = [
  {
    name: '„Åà„Çì„Å®„Å§Â±ã',
    from_id: 'e3ef104d-eda0-4692-8be3-b8c28ff7bf6c', // TabelogÊåÅ„Å°
    to_id: 'bdb0a2d5-36fc-4c87-a872-ba986ed227ba',   // „Ç®„Éî„ÇΩ„Éº„ÉâÊåÅ„Å°
  },
  {
    name: 'ÊåΩËÇâ„Å®Á±≥',
    from_id: '87be31f1-3343-4f0f-a76c-46d34c0e7f15', // TabelogÊåÅ„Å°
    to_id: '77a18670-4ad6-4299-9779-2ed8a5ba4c15',   // „Ç®„Éî„ÇΩ„Éº„ÉâÊåÅ„Å°
  }
]

async function mergeDuplicateLocations() {
  console.log('üîß ÈáçË§á„É≠„Ç±„Éº„Ç∑„Éß„É≥Áµ±ÂêàÈñãÂßã')
  console.log('üìä „Ç®„Éî„ÇΩ„Éº„ÉâÁ¥ê‰ªò„Åç„É¨„Ç≥„Éº„Éâ„Å´TabelogURLÁßªË°å')
  console.log('=' .repeat(60))
  
  let successCount = 0
  let errorCount = 0
  
  for (const target of mergeTargets) {
    console.log(`\nüîÑ ${target.name}„ÅÆÁµ±Âêà`)
    
    // FROMÔºàTabelogÊåÅ„Å°Ôºâ„É¨„Ç≥„Éº„ÉâÂèñÂæó
    const { data: fromRecord } = await supabase
      .from('locations')
      .select('*')
      .eq('id', target.from_id)
      .single()
    
    // TOÔºà„Ç®„Éî„ÇΩ„Éº„ÉâÊåÅ„Å°Ôºâ„É¨„Ç≥„Éº„ÉâÂèñÂæó
    const { data: toRecord } = await supabase
      .from('locations')
      .select('*')
      .eq('id', target.to_id)
      .single()
    
    if (!fromRecord || !toRecord) {
      console.log('‚ùå „É¨„Ç≥„Éº„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì')
      errorCount++
      continue
    }
    
    console.log(`üìç FROM: ${fromRecord.name}`)
    console.log(`   ID: ${fromRecord.id}`)
    console.log(`   Tabelog: ${fromRecord.tabelog_url}`)
    console.log(`   „Ç®„Éî„ÇΩ„Éº„Éâ: ${fromRecord.episode_id || '„Å™„Åó'}`)
    
    console.log(`üìç TO: ${toRecord.name}`)
    console.log(`   ID: ${toRecord.id}`)
    console.log(`   Tabelog: ${toRecord.tabelog_url || '„Å™„Åó'}`)
    console.log(`   „Ç®„Éî„ÇΩ„Éº„Éâ: ${toRecord.episode_id}`)
    
    // TabelogURL„Å®„Ç¢„Éï„Ç£„É™„Ç®„Ç§„ÉàÊÉÖÂ†±„ÇíÁßªË°å
    const { error: updateError } = await supabase
      .from('locations')
      .update({
        tabelog_url: fromRecord.tabelog_url,
        affiliate_info: fromRecord.affiliate_info,
        address: fromRecord.address || toRecord.address, // ‰ΩèÊâÄ„ÇÇÊúÄÊñ∞„ÅÆ„ÇÇ„ÅÆ„Çí‰ΩøÁî®
      })
      .eq('id', target.to_id)
    
    if (updateError) {
      console.error('‚ùå Êõ¥Êñ∞„Ç®„É©„Éº:', updateError.message)
      errorCount++
      continue
    }
    
    console.log('‚úÖ TabelogURLÁßªË°åÊàêÂäü')
    
    // ÈáçË§áÂÖÉ„É¨„Ç≥„Éº„Éâ„ÅÆTabelog URL„Çí„ÇØ„É™„Ç¢Ôºà„Åæ„Åü„ÅØÂâäÈô§Ôºâ
    const { error: clearError } = await supabase
      .from('locations')
      .update({
        tabelog_url: null,
        affiliate_info: {
          merged_to: target.to_id,
          merged_at: new Date().toISOString(),
          original_url: fromRecord.tabelog_url
        }
      })
      .eq('id', target.from_id)
    
    if (clearError) {
      console.error('‚ö†Ô∏è „ÇØ„É™„Ç¢„Ç®„É©„Éº:', clearError.message)
    } else {
      console.log('‚úÖ ÈáçË§áÂÖÉ„É¨„Ç≥„Éº„Éâ„ÇØ„É™„Ç¢ÂÆå‰∫Ü')
      successCount++
    }
  }
  
  // Êõ¥ÁßëÂ†Ä‰∫ï„ÅÆÁâπÊÆä„Ç±„Éº„ÇπÔºà‰∏°Êñπ„Ç®„Éî„ÇΩ„Éº„ÉâÊåÅ„Å°Ôºâ
  console.log('\nüîÑ Êõ¥ÁßëÂ†Ä‰∫ï„ÅÆÁ¢∫Ë™çÔºà‰∏°Êñπ„Ç®„Éî„ÇΩ„Éº„ÉâÊåÅ„Å°Ôºâ')
  const { data: sarashinaRecords } = await supabase
    .from('locations')
    .select('*')
    .ilike('name', '%Êõ¥ÁßëÂ†Ä‰∫ï%')
  
  console.log('üìç Êõ¥ÁßëÂ†Ä‰∫ï„É¨„Ç≥„Éº„Éâ:')
  sarashinaRecords?.forEach(rec => {
    console.log(`  ID: ${rec.id}`)
    console.log(`  ÂêçÂâç: ${rec.name}`)
    console.log(`  Tabelog: ${rec.tabelog_url ? '‚úÖ' : '‚ùå'}`)
    console.log(`  „Ç®„Éî„ÇΩ„Éº„Éâ: ${rec.episode_id ? '‚úÖ' : '‚ùå'}`)
    console.log('  ---')
  })
  
  // ÁµêÊûú„É¨„Éù„Éº„Éà
  console.log('\n' + '=' .repeat(60))
  console.log('üìä Áµ±ÂêàÁµêÊûú„É¨„Éù„Éº„Éà')
  console.log('=' .repeat(60))
  console.log(`‚úÖ Áµ±ÂêàÊàêÂäü: ${successCount}‰ª∂`)
  console.log(`‚ùå „Ç®„É©„Éº: ${errorCount}‰ª∂`)
  
  // ÊúÄÁµÇÁ¢∫Ë™ç
  const { data: finalCheck } = await supabase
    .from('locations')
    .select('id, name, tabelog_url, episode_id')
    .not('tabelog_url', 'is', null)
  
  console.log(`\nüìä Áµ±ÂêàÂæå„ÅÆ„Ç¢„Éï„Ç£„É™„Ç®„Ç§„ÉàË®≠ÂÆöÊ∏à„Åø: ${finalCheck?.length || 0}‰ª∂`)
  
  const withEpisode = finalCheck?.filter(loc => loc.episode_id)
  console.log(`‚úÖ „Ç®„Éî„ÇΩ„Éº„ÉâÁ¥ê‰ªò„Åç„ÅÇ„Çä: ${withEpisode?.length || 0}‰ª∂`)
  
  return {
    success_count: successCount,
    error_count: errorCount,
    total_affiliates: finalCheck?.length || 0,
    with_episode: withEpisode?.length || 0
  }
}

mergeDuplicateLocations()